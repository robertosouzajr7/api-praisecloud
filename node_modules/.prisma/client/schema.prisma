generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id        String  @id @default(uuid())
  nome      String
  email     String  @unique
  telefone  String?
  senha     String
  isAdmin   Boolean @default(true)
  ImgPerfil String?

  membros     Member[]     @relation("GroupMembers")
  musicas     Musica[]     @relation("GroupMusicas")
  kits        Kit[]        @relation("GroupKits")
  agendas     Agenda[]     @relation("GroupAgendas")
  posts       Post[]       @relation("GroupPosts")
  comentarios Comentario[] @relation("GroupComentarios")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id         String   @id @default(uuid())
  nome       String
  email      String   @unique
  telefone   String?
  senha      String
  imgPerfil  String?
  nascimento DateTime
  nipe       String
  cargo      String
  isAdmin    Boolean  @default(false)

  grupoId String
  grupo   Group  @relation("GroupMembers", fields: [grupoId], references: [id])

  posts        Post[]
  comentarios  Comentario[]
  mensalidades Mensalidade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Musica {
  id       String  @id @default(uuid())
  title    String
  musicUrl String
  capaUrl  String
  letra    String?
  artista  String?

  grupoId String
  grupo   Group  @relation("GroupMusicas", fields: [grupoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kit {
  id      String  @id @default(uuid())
  title   String
  nipe    String
  cantado String?
  kitUrl  String
  letra   String?

  grupoId String
  grupo   Group  @relation("GroupKits", fields: [grupoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agenda {
  id        String    @id @default(uuid())
  title     String
  descricao String
  endereco  String?
  data      DateTime?
  status    String

  grupoId String
  grupo   Group  @relation("GroupAgendas", fields: [grupoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comentario {
  id        String @id @default(uuid())
  descricao String

  autorId String?
  autor   Member? @relation(fields: [autorId], references: [id])

  grupoId String?
  grupo   Group?  @relation("GroupComentarios", fields: [grupoId], references: [id])

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mensalidade {
  id         String   @id @default(uuid())
  valor      Float
  descricao  String?
  vencimento DateTime

  membroId String
  membro   Member @relation(fields: [membroId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String  @id @default(uuid())
  title     String
  descricao String
  imagem    String?

  grupoId String
  grupo   Group  @relation("GroupPosts", fields: [grupoId], references: [id])

  autorId String
  autor   Member @relation(fields: [autorId], references: [id])

  comentarios Comentario[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
