
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Group
 * 
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>
/**
 * Model Member
 * 
 */
export type Member = $Result.DefaultSelection<Prisma.$MemberPayload>
/**
 * Model Musica
 * 
 */
export type Musica = $Result.DefaultSelection<Prisma.$MusicaPayload>
/**
 * Model Kit
 * 
 */
export type Kit = $Result.DefaultSelection<Prisma.$KitPayload>
/**
 * Model Agenda
 * 
 */
export type Agenda = $Result.DefaultSelection<Prisma.$AgendaPayload>
/**
 * Model Comentario
 * 
 */
export type Comentario = $Result.DefaultSelection<Prisma.$ComentarioPayload>
/**
 * Model Mensalidade
 * 
 */
export type Mensalidade = $Result.DefaultSelection<Prisma.$MensalidadePayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Groups
 * const groups = await prisma.group.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Groups
   * const groups = await prisma.group.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs>;

  /**
   * `prisma.member`: Exposes CRUD operations for the **Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.MemberDelegate<ExtArgs>;

  /**
   * `prisma.musica`: Exposes CRUD operations for the **Musica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Musicas
    * const musicas = await prisma.musica.findMany()
    * ```
    */
  get musica(): Prisma.MusicaDelegate<ExtArgs>;

  /**
   * `prisma.kit`: Exposes CRUD operations for the **Kit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kits
    * const kits = await prisma.kit.findMany()
    * ```
    */
  get kit(): Prisma.KitDelegate<ExtArgs>;

  /**
   * `prisma.agenda`: Exposes CRUD operations for the **Agenda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agenda
    * const agenda = await prisma.agenda.findMany()
    * ```
    */
  get agenda(): Prisma.AgendaDelegate<ExtArgs>;

  /**
   * `prisma.comentario`: Exposes CRUD operations for the **Comentario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comentarios
    * const comentarios = await prisma.comentario.findMany()
    * ```
    */
  get comentario(): Prisma.ComentarioDelegate<ExtArgs>;

  /**
   * `prisma.mensalidade`: Exposes CRUD operations for the **Mensalidade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mensalidades
    * const mensalidades = await prisma.mensalidade.findMany()
    * ```
    */
  get mensalidade(): Prisma.MensalidadeDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Group: 'Group',
    Member: 'Member',
    Musica: 'Musica',
    Kit: 'Kit',
    Agenda: 'Agenda',
    Comentario: 'Comentario',
    Mensalidade: 'Mensalidade',
    Post: 'Post'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "group" | "member" | "musica" | "kit" | "agenda" | "comentario" | "mensalidade" | "post"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      Member: {
        payload: Prisma.$MemberPayload<ExtArgs>
        fields: Prisma.MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findFirst: {
            args: Prisma.MemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findMany: {
            args: Prisma.MemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          create: {
            args: Prisma.MemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          createMany: {
            args: Prisma.MemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          delete: {
            args: Prisma.MemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          update: {
            args: Prisma.MemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          deleteMany: {
            args: Prisma.MemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          aggregate: {
            args: Prisma.MemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMember>
          }
          groupBy: {
            args: Prisma.MemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberCountArgs<ExtArgs>
            result: $Utils.Optional<MemberCountAggregateOutputType> | number
          }
        }
      }
      Musica: {
        payload: Prisma.$MusicaPayload<ExtArgs>
        fields: Prisma.MusicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MusicaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MusicaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload>
          }
          findFirst: {
            args: Prisma.MusicaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MusicaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload>
          }
          findMany: {
            args: Prisma.MusicaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload>[]
          }
          create: {
            args: Prisma.MusicaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload>
          }
          createMany: {
            args: Prisma.MusicaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MusicaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload>[]
          }
          delete: {
            args: Prisma.MusicaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload>
          }
          update: {
            args: Prisma.MusicaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload>
          }
          deleteMany: {
            args: Prisma.MusicaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MusicaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MusicaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicaPayload>
          }
          aggregate: {
            args: Prisma.MusicaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMusica>
          }
          groupBy: {
            args: Prisma.MusicaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MusicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MusicaCountArgs<ExtArgs>
            result: $Utils.Optional<MusicaCountAggregateOutputType> | number
          }
        }
      }
      Kit: {
        payload: Prisma.$KitPayload<ExtArgs>
        fields: Prisma.KitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload>
          }
          findFirst: {
            args: Prisma.KitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload>
          }
          findMany: {
            args: Prisma.KitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload>[]
          }
          create: {
            args: Prisma.KitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload>
          }
          createMany: {
            args: Prisma.KitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload>[]
          }
          delete: {
            args: Prisma.KitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload>
          }
          update: {
            args: Prisma.KitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload>
          }
          deleteMany: {
            args: Prisma.KitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitPayload>
          }
          aggregate: {
            args: Prisma.KitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKit>
          }
          groupBy: {
            args: Prisma.KitGroupByArgs<ExtArgs>
            result: $Utils.Optional<KitGroupByOutputType>[]
          }
          count: {
            args: Prisma.KitCountArgs<ExtArgs>
            result: $Utils.Optional<KitCountAggregateOutputType> | number
          }
        }
      }
      Agenda: {
        payload: Prisma.$AgendaPayload<ExtArgs>
        fields: Prisma.AgendaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgendaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgendaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          findFirst: {
            args: Prisma.AgendaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgendaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          findMany: {
            args: Prisma.AgendaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>[]
          }
          create: {
            args: Prisma.AgendaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          createMany: {
            args: Prisma.AgendaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgendaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>[]
          }
          delete: {
            args: Prisma.AgendaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          update: {
            args: Prisma.AgendaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          deleteMany: {
            args: Prisma.AgendaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgendaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgendaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          aggregate: {
            args: Prisma.AgendaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgenda>
          }
          groupBy: {
            args: Prisma.AgendaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgendaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgendaCountArgs<ExtArgs>
            result: $Utils.Optional<AgendaCountAggregateOutputType> | number
          }
        }
      }
      Comentario: {
        payload: Prisma.$ComentarioPayload<ExtArgs>
        fields: Prisma.ComentarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComentarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComentarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload>
          }
          findFirst: {
            args: Prisma.ComentarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComentarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload>
          }
          findMany: {
            args: Prisma.ComentarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload>[]
          }
          create: {
            args: Prisma.ComentarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload>
          }
          createMany: {
            args: Prisma.ComentarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComentarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload>[]
          }
          delete: {
            args: Prisma.ComentarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload>
          }
          update: {
            args: Prisma.ComentarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload>
          }
          deleteMany: {
            args: Prisma.ComentarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComentarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComentarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComentarioPayload>
          }
          aggregate: {
            args: Prisma.ComentarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComentario>
          }
          groupBy: {
            args: Prisma.ComentarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComentarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComentarioCountArgs<ExtArgs>
            result: $Utils.Optional<ComentarioCountAggregateOutputType> | number
          }
        }
      }
      Mensalidade: {
        payload: Prisma.$MensalidadePayload<ExtArgs>
        fields: Prisma.MensalidadeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MensalidadeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MensalidadeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload>
          }
          findFirst: {
            args: Prisma.MensalidadeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MensalidadeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload>
          }
          findMany: {
            args: Prisma.MensalidadeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload>[]
          }
          create: {
            args: Prisma.MensalidadeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload>
          }
          createMany: {
            args: Prisma.MensalidadeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MensalidadeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload>[]
          }
          delete: {
            args: Prisma.MensalidadeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload>
          }
          update: {
            args: Prisma.MensalidadeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload>
          }
          deleteMany: {
            args: Prisma.MensalidadeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MensalidadeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MensalidadeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensalidadePayload>
          }
          aggregate: {
            args: Prisma.MensalidadeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMensalidade>
          }
          groupBy: {
            args: Prisma.MensalidadeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MensalidadeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MensalidadeCountArgs<ExtArgs>
            result: $Utils.Optional<MensalidadeCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    membros: number
    musicas: number
    kits: number
    agendas: number
    posts: number
    comentarios: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membros?: boolean | GroupCountOutputTypeCountMembrosArgs
    musicas?: boolean | GroupCountOutputTypeCountMusicasArgs
    kits?: boolean | GroupCountOutputTypeCountKitsArgs
    agendas?: boolean | GroupCountOutputTypeCountAgendasArgs
    posts?: boolean | GroupCountOutputTypeCountPostsArgs
    comentarios?: boolean | GroupCountOutputTypeCountComentariosArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountMembrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountMusicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MusicaWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountKitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KitWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountAgendasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendaWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountComentariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComentarioWhereInput
  }


  /**
   * Count Type MemberCountOutputType
   */

  export type MemberCountOutputType = {
    posts: number
    comentarios: number
    mensalidades: number
  }

  export type MemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | MemberCountOutputTypeCountPostsArgs
    comentarios?: boolean | MemberCountOutputTypeCountComentariosArgs
    mensalidades?: boolean | MemberCountOutputTypeCountMensalidadesArgs
  }

  // Custom InputTypes
  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberCountOutputType
     */
    select?: MemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountComentariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComentarioWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountMensalidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensalidadeWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    comentarios: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comentarios?: boolean | PostCountOutputTypeCountComentariosArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountComentariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComentarioWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    telefone: string | null
    senha: string | null
    isAdmin: boolean | null
    ImgPerfil: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    telefone: string | null
    senha: string | null
    isAdmin: boolean | null
    ImgPerfil: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    senha: number
    isAdmin: number
    ImgPerfil: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    senha?: true
    isAdmin?: true
    ImgPerfil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    senha?: true
    isAdmin?: true
    ImgPerfil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    senha?: true
    isAdmin?: true
    ImgPerfil?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: string
    nome: string
    email: string
    telefone: string | null
    senha: string
    isAdmin: boolean
    ImgPerfil: string | null
    createdAt: Date
    updatedAt: Date
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    senha?: boolean
    isAdmin?: boolean
    ImgPerfil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    membros?: boolean | Group$membrosArgs<ExtArgs>
    musicas?: boolean | Group$musicasArgs<ExtArgs>
    kits?: boolean | Group$kitsArgs<ExtArgs>
    agendas?: boolean | Group$agendasArgs<ExtArgs>
    posts?: boolean | Group$postsArgs<ExtArgs>
    comentarios?: boolean | Group$comentariosArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    senha?: boolean
    isAdmin?: boolean
    ImgPerfil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["group"]>

  export type GroupSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    senha?: boolean
    isAdmin?: boolean
    ImgPerfil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membros?: boolean | Group$membrosArgs<ExtArgs>
    musicas?: boolean | Group$musicasArgs<ExtArgs>
    kits?: boolean | Group$kitsArgs<ExtArgs>
    agendas?: boolean | Group$agendasArgs<ExtArgs>
    posts?: boolean | Group$postsArgs<ExtArgs>
    comentarios?: boolean | Group$comentariosArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {
      membros: Prisma.$MemberPayload<ExtArgs>[]
      musicas: Prisma.$MusicaPayload<ExtArgs>[]
      kits: Prisma.$KitPayload<ExtArgs>[]
      agendas: Prisma.$AgendaPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      comentarios: Prisma.$ComentarioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      telefone: string | null
      senha: string
      isAdmin: boolean
      ImgPerfil: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupFindUniqueArgs>(args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupFindFirstArgs>(args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupFindManyArgs>(args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
     */
    create<T extends GroupCreateArgs>(args: SelectSubset<T, GroupCreateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Groups.
     * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupCreateManyArgs>(args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {GroupCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
     */
    delete<T extends GroupDeleteArgs>(args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupUpdateArgs>(args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupDeleteManyArgs>(args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupUpdateManyArgs>(args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
     */
    upsert<T extends GroupUpsertArgs>(args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membros<T extends Group$membrosArgs<ExtArgs> = {}>(args?: Subset<T, Group$membrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany"> | Null>
    musicas<T extends Group$musicasArgs<ExtArgs> = {}>(args?: Subset<T, Group$musicasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "findMany"> | Null>
    kits<T extends Group$kitsArgs<ExtArgs> = {}>(args?: Subset<T, Group$kitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findMany"> | Null>
    agendas<T extends Group$agendasArgs<ExtArgs> = {}>(args?: Subset<T, Group$agendasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findMany"> | Null>
    posts<T extends Group$postsArgs<ExtArgs> = {}>(args?: Subset<T, Group$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany"> | Null>
    comentarios<T extends Group$comentariosArgs<ExtArgs> = {}>(args?: Subset<T, Group$comentariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Group model
   */ 
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'String'>
    readonly nome: FieldRef<"Group", 'String'>
    readonly email: FieldRef<"Group", 'String'>
    readonly telefone: FieldRef<"Group", 'String'>
    readonly senha: FieldRef<"Group", 'String'>
    readonly isAdmin: FieldRef<"Group", 'Boolean'>
    readonly ImgPerfil: FieldRef<"Group", 'String'>
    readonly createdAt: FieldRef<"Group", 'DateTime'>
    readonly updatedAt: FieldRef<"Group", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Group createManyAndReturn
   */
  export type GroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }

  /**
   * Group.membros
   */
  export type Group$membrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    cursor?: MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Group.musicas
   */
  export type Group$musicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    where?: MusicaWhereInput
    orderBy?: MusicaOrderByWithRelationInput | MusicaOrderByWithRelationInput[]
    cursor?: MusicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MusicaScalarFieldEnum | MusicaScalarFieldEnum[]
  }

  /**
   * Group.kits
   */
  export type Group$kitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    where?: KitWhereInput
    orderBy?: KitOrderByWithRelationInput | KitOrderByWithRelationInput[]
    cursor?: KitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KitScalarFieldEnum | KitScalarFieldEnum[]
  }

  /**
   * Group.agendas
   */
  export type Group$agendasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    where?: AgendaWhereInput
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    cursor?: AgendaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendaScalarFieldEnum | AgendaScalarFieldEnum[]
  }

  /**
   * Group.posts
   */
  export type Group$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Group.comentarios
   */
  export type Group$comentariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    where?: ComentarioWhereInput
    orderBy?: ComentarioOrderByWithRelationInput | ComentarioOrderByWithRelationInput[]
    cursor?: ComentarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
  }


  /**
   * Model Member
   */

  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    telefone: string | null
    senha: string | null
    imgPerfil: string | null
    nascimento: Date | null
    nipe: string | null
    cargo: string | null
    isAdmin: boolean | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MemberMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    telefone: string | null
    senha: string | null
    imgPerfil: string | null
    nascimento: Date | null
    nipe: string | null
    cargo: string | null
    isAdmin: boolean | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MemberCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    senha: number
    imgPerfil: number
    nascimento: number
    nipe: number
    cargo: number
    isAdmin: number
    grupoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MemberMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    senha?: true
    imgPerfil?: true
    nascimento?: true
    nipe?: true
    cargo?: true
    isAdmin?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MemberMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    senha?: true
    imgPerfil?: true
    nascimento?: true
    nipe?: true
    cargo?: true
    isAdmin?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MemberCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    senha?: true
    imgPerfil?: true
    nascimento?: true
    nipe?: true
    cargo?: true
    isAdmin?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Member to aggregate.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithAggregationInput | MemberOrderByWithAggregationInput[]
    by: MemberScalarFieldEnum[] | MemberScalarFieldEnum
    having?: MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }

  export type MemberGroupByOutputType = {
    id: string
    nome: string
    email: string
    telefone: string | null
    senha: string
    imgPerfil: string | null
    nascimento: Date
    nipe: string
    cargo: string
    isAdmin: boolean
    grupoId: string
    createdAt: Date
    updatedAt: Date
    _count: MemberCountAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    senha?: boolean
    imgPerfil?: boolean
    nascimento?: boolean
    nipe?: boolean
    cargo?: boolean
    isAdmin?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
    posts?: boolean | Member$postsArgs<ExtArgs>
    comentarios?: boolean | Member$comentariosArgs<ExtArgs>
    mensalidades?: boolean | Member$mensalidadesArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    senha?: boolean
    imgPerfil?: boolean
    nascimento?: boolean
    nipe?: boolean
    cargo?: boolean
    isAdmin?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    senha?: boolean
    imgPerfil?: boolean
    nascimento?: boolean
    nipe?: boolean
    cargo?: boolean
    isAdmin?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
    posts?: boolean | Member$postsArgs<ExtArgs>
    comentarios?: boolean | Member$comentariosArgs<ExtArgs>
    mensalidades?: boolean | Member$mensalidadesArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Member"
    objects: {
      grupo: Prisma.$GroupPayload<ExtArgs>
      posts: Prisma.$PostPayload<ExtArgs>[]
      comentarios: Prisma.$ComentarioPayload<ExtArgs>[]
      mensalidades: Prisma.$MensalidadePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      telefone: string | null
      senha: string
      imgPerfil: string | null
      nascimento: Date
      nipe: string
      cargo: string
      isAdmin: boolean
      grupoId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["member"]>
    composites: {}
  }

  type MemberGetPayload<S extends boolean | null | undefined | MemberDefaultArgs> = $Result.GetResult<Prisma.$MemberPayload, S>

  type MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MemberCountAggregateInputType | true
    }

  export interface MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Member'], meta: { name: 'Member' } }
    /**
     * Find zero or one Member that matches the filter.
     * @param {MemberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberFindUniqueArgs>(args: SelectSubset<T, MemberFindUniqueArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Member that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberFindFirstArgs>(args?: SelectSubset<T, MemberFindFirstArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberWithIdOnly = await prisma.member.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberFindManyArgs>(args?: SelectSubset<T, MemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Member.
     * @param {MemberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
     */
    create<T extends MemberCreateArgs>(args: SelectSubset<T, MemberCreateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Members.
     * @param {MemberCreateManyArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberCreateManyArgs>(args?: SelectSubset<T, MemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Members and returns the data saved in the database.
     * @param {MemberCreateManyAndReturnArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Member.
     * @param {MemberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
     */
    delete<T extends MemberDeleteArgs>(args: SelectSubset<T, MemberDeleteArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Member.
     * @param {MemberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberUpdateArgs>(args: SelectSubset<T, MemberUpdateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Members.
     * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberDeleteManyArgs>(args?: SelectSubset<T, MemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberUpdateManyArgs>(args: SelectSubset<T, MemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Member.
     * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
     */
    upsert<T extends MemberUpsertArgs>(args: SelectSubset<T, MemberUpsertArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MemberCountArgs>(
      args?: Subset<T, MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): Prisma.PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Member model
   */
  readonly fields: MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupo<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    posts<T extends Member$postsArgs<ExtArgs> = {}>(args?: Subset<T, Member$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany"> | Null>
    comentarios<T extends Member$comentariosArgs<ExtArgs> = {}>(args?: Subset<T, Member$comentariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "findMany"> | Null>
    mensalidades<T extends Member$mensalidadesArgs<ExtArgs> = {}>(args?: Subset<T, Member$mensalidadesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Member model
   */ 
  interface MemberFieldRefs {
    readonly id: FieldRef<"Member", 'String'>
    readonly nome: FieldRef<"Member", 'String'>
    readonly email: FieldRef<"Member", 'String'>
    readonly telefone: FieldRef<"Member", 'String'>
    readonly senha: FieldRef<"Member", 'String'>
    readonly imgPerfil: FieldRef<"Member", 'String'>
    readonly nascimento: FieldRef<"Member", 'DateTime'>
    readonly nipe: FieldRef<"Member", 'String'>
    readonly cargo: FieldRef<"Member", 'String'>
    readonly isAdmin: FieldRef<"Member", 'Boolean'>
    readonly grupoId: FieldRef<"Member", 'String'>
    readonly createdAt: FieldRef<"Member", 'DateTime'>
    readonly updatedAt: FieldRef<"Member", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Member findUnique
   */
  export type MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findUniqueOrThrow
   */
  export type MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findFirst
   */
  export type MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findFirstOrThrow
   */
  export type MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findMany
   */
  export type MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member create
   */
  export type MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Member.
     */
    data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
  }

  /**
   * Member createMany
   */
  export type MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member createManyAndReturn
   */
  export type MemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Member update
   */
  export type MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Member.
     */
    data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    /**
     * Choose, which Member to update.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member updateMany
   */
  export type MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
  }

  /**
   * Member upsert
   */
  export type MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Member to update in case it exists.
     */
    where: MemberWhereUniqueInput
    /**
     * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
     */
    create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    /**
     * In case the Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
  }

  /**
   * Member delete
   */
  export type MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter which Member to delete.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member deleteMany
   */
  export type MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MemberWhereInput
  }

  /**
   * Member.posts
   */
  export type Member$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Member.comentarios
   */
  export type Member$comentariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    where?: ComentarioWhereInput
    orderBy?: ComentarioOrderByWithRelationInput | ComentarioOrderByWithRelationInput[]
    cursor?: ComentarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }

  /**
   * Member.mensalidades
   */
  export type Member$mensalidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    where?: MensalidadeWhereInput
    orderBy?: MensalidadeOrderByWithRelationInput | MensalidadeOrderByWithRelationInput[]
    cursor?: MensalidadeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensalidadeScalarFieldEnum | MensalidadeScalarFieldEnum[]
  }

  /**
   * Member without action
   */
  export type MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
  }


  /**
   * Model Musica
   */

  export type AggregateMusica = {
    _count: MusicaCountAggregateOutputType | null
    _min: MusicaMinAggregateOutputType | null
    _max: MusicaMaxAggregateOutputType | null
  }

  export type MusicaMinAggregateOutputType = {
    id: string | null
    title: string | null
    musicUrl: string | null
    capaUrl: string | null
    letra: string | null
    artista: string | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MusicaMaxAggregateOutputType = {
    id: string | null
    title: string | null
    musicUrl: string | null
    capaUrl: string | null
    letra: string | null
    artista: string | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MusicaCountAggregateOutputType = {
    id: number
    title: number
    musicUrl: number
    capaUrl: number
    letra: number
    artista: number
    grupoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MusicaMinAggregateInputType = {
    id?: true
    title?: true
    musicUrl?: true
    capaUrl?: true
    letra?: true
    artista?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MusicaMaxAggregateInputType = {
    id?: true
    title?: true
    musicUrl?: true
    capaUrl?: true
    letra?: true
    artista?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MusicaCountAggregateInputType = {
    id?: true
    title?: true
    musicUrl?: true
    capaUrl?: true
    letra?: true
    artista?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MusicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Musica to aggregate.
     */
    where?: MusicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicas to fetch.
     */
    orderBy?: MusicaOrderByWithRelationInput | MusicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MusicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Musicas
    **/
    _count?: true | MusicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MusicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MusicaMaxAggregateInputType
  }

  export type GetMusicaAggregateType<T extends MusicaAggregateArgs> = {
        [P in keyof T & keyof AggregateMusica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMusica[P]>
      : GetScalarType<T[P], AggregateMusica[P]>
  }




  export type MusicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MusicaWhereInput
    orderBy?: MusicaOrderByWithAggregationInput | MusicaOrderByWithAggregationInput[]
    by: MusicaScalarFieldEnum[] | MusicaScalarFieldEnum
    having?: MusicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MusicaCountAggregateInputType | true
    _min?: MusicaMinAggregateInputType
    _max?: MusicaMaxAggregateInputType
  }

  export type MusicaGroupByOutputType = {
    id: string
    title: string
    musicUrl: string
    capaUrl: string
    letra: string | null
    artista: string | null
    grupoId: string
    createdAt: Date
    updatedAt: Date
    _count: MusicaCountAggregateOutputType | null
    _min: MusicaMinAggregateOutputType | null
    _max: MusicaMaxAggregateOutputType | null
  }

  type GetMusicaGroupByPayload<T extends MusicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MusicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MusicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MusicaGroupByOutputType[P]>
            : GetScalarType<T[P], MusicaGroupByOutputType[P]>
        }
      >
    >


  export type MusicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    musicUrl?: boolean
    capaUrl?: boolean
    letra?: boolean
    artista?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["musica"]>

  export type MusicaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    musicUrl?: boolean
    capaUrl?: boolean
    letra?: boolean
    artista?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["musica"]>

  export type MusicaSelectScalar = {
    id?: boolean
    title?: boolean
    musicUrl?: boolean
    capaUrl?: boolean
    letra?: boolean
    artista?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MusicaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type MusicaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $MusicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Musica"
    objects: {
      grupo: Prisma.$GroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      musicUrl: string
      capaUrl: string
      letra: string | null
      artista: string | null
      grupoId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["musica"]>
    composites: {}
  }

  type MusicaGetPayload<S extends boolean | null | undefined | MusicaDefaultArgs> = $Result.GetResult<Prisma.$MusicaPayload, S>

  type MusicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MusicaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MusicaCountAggregateInputType | true
    }

  export interface MusicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Musica'], meta: { name: 'Musica' } }
    /**
     * Find zero or one Musica that matches the filter.
     * @param {MusicaFindUniqueArgs} args - Arguments to find a Musica
     * @example
     * // Get one Musica
     * const musica = await prisma.musica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MusicaFindUniqueArgs>(args: SelectSubset<T, MusicaFindUniqueArgs<ExtArgs>>): Prisma__MusicaClient<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Musica that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MusicaFindUniqueOrThrowArgs} args - Arguments to find a Musica
     * @example
     * // Get one Musica
     * const musica = await prisma.musica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MusicaFindUniqueOrThrowArgs>(args: SelectSubset<T, MusicaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MusicaClient<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Musica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicaFindFirstArgs} args - Arguments to find a Musica
     * @example
     * // Get one Musica
     * const musica = await prisma.musica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MusicaFindFirstArgs>(args?: SelectSubset<T, MusicaFindFirstArgs<ExtArgs>>): Prisma__MusicaClient<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Musica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicaFindFirstOrThrowArgs} args - Arguments to find a Musica
     * @example
     * // Get one Musica
     * const musica = await prisma.musica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MusicaFindFirstOrThrowArgs>(args?: SelectSubset<T, MusicaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MusicaClient<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Musicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Musicas
     * const musicas = await prisma.musica.findMany()
     * 
     * // Get first 10 Musicas
     * const musicas = await prisma.musica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const musicaWithIdOnly = await prisma.musica.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MusicaFindManyArgs>(args?: SelectSubset<T, MusicaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Musica.
     * @param {MusicaCreateArgs} args - Arguments to create a Musica.
     * @example
     * // Create one Musica
     * const Musica = await prisma.musica.create({
     *   data: {
     *     // ... data to create a Musica
     *   }
     * })
     * 
     */
    create<T extends MusicaCreateArgs>(args: SelectSubset<T, MusicaCreateArgs<ExtArgs>>): Prisma__MusicaClient<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Musicas.
     * @param {MusicaCreateManyArgs} args - Arguments to create many Musicas.
     * @example
     * // Create many Musicas
     * const musica = await prisma.musica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MusicaCreateManyArgs>(args?: SelectSubset<T, MusicaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Musicas and returns the data saved in the database.
     * @param {MusicaCreateManyAndReturnArgs} args - Arguments to create many Musicas.
     * @example
     * // Create many Musicas
     * const musica = await prisma.musica.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Musicas and only return the `id`
     * const musicaWithIdOnly = await prisma.musica.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MusicaCreateManyAndReturnArgs>(args?: SelectSubset<T, MusicaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Musica.
     * @param {MusicaDeleteArgs} args - Arguments to delete one Musica.
     * @example
     * // Delete one Musica
     * const Musica = await prisma.musica.delete({
     *   where: {
     *     // ... filter to delete one Musica
     *   }
     * })
     * 
     */
    delete<T extends MusicaDeleteArgs>(args: SelectSubset<T, MusicaDeleteArgs<ExtArgs>>): Prisma__MusicaClient<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Musica.
     * @param {MusicaUpdateArgs} args - Arguments to update one Musica.
     * @example
     * // Update one Musica
     * const musica = await prisma.musica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MusicaUpdateArgs>(args: SelectSubset<T, MusicaUpdateArgs<ExtArgs>>): Prisma__MusicaClient<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Musicas.
     * @param {MusicaDeleteManyArgs} args - Arguments to filter Musicas to delete.
     * @example
     * // Delete a few Musicas
     * const { count } = await prisma.musica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MusicaDeleteManyArgs>(args?: SelectSubset<T, MusicaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Musicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Musicas
     * const musica = await prisma.musica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MusicaUpdateManyArgs>(args: SelectSubset<T, MusicaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Musica.
     * @param {MusicaUpsertArgs} args - Arguments to update or create a Musica.
     * @example
     * // Update or create a Musica
     * const musica = await prisma.musica.upsert({
     *   create: {
     *     // ... data to create a Musica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Musica we want to update
     *   }
     * })
     */
    upsert<T extends MusicaUpsertArgs>(args: SelectSubset<T, MusicaUpsertArgs<ExtArgs>>): Prisma__MusicaClient<$Result.GetResult<Prisma.$MusicaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Musicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicaCountArgs} args - Arguments to filter Musicas to count.
     * @example
     * // Count the number of Musicas
     * const count = await prisma.musica.count({
     *   where: {
     *     // ... the filter for the Musicas we want to count
     *   }
     * })
    **/
    count<T extends MusicaCountArgs>(
      args?: Subset<T, MusicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MusicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Musica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MusicaAggregateArgs>(args: Subset<T, MusicaAggregateArgs>): Prisma.PrismaPromise<GetMusicaAggregateType<T>>

    /**
     * Group by Musica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MusicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MusicaGroupByArgs['orderBy'] }
        : { orderBy?: MusicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MusicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMusicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Musica model
   */
  readonly fields: MusicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Musica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MusicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupo<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Musica model
   */ 
  interface MusicaFieldRefs {
    readonly id: FieldRef<"Musica", 'String'>
    readonly title: FieldRef<"Musica", 'String'>
    readonly musicUrl: FieldRef<"Musica", 'String'>
    readonly capaUrl: FieldRef<"Musica", 'String'>
    readonly letra: FieldRef<"Musica", 'String'>
    readonly artista: FieldRef<"Musica", 'String'>
    readonly grupoId: FieldRef<"Musica", 'String'>
    readonly createdAt: FieldRef<"Musica", 'DateTime'>
    readonly updatedAt: FieldRef<"Musica", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Musica findUnique
   */
  export type MusicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * Filter, which Musica to fetch.
     */
    where: MusicaWhereUniqueInput
  }

  /**
   * Musica findUniqueOrThrow
   */
  export type MusicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * Filter, which Musica to fetch.
     */
    where: MusicaWhereUniqueInput
  }

  /**
   * Musica findFirst
   */
  export type MusicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * Filter, which Musica to fetch.
     */
    where?: MusicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicas to fetch.
     */
    orderBy?: MusicaOrderByWithRelationInput | MusicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Musicas.
     */
    cursor?: MusicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Musicas.
     */
    distinct?: MusicaScalarFieldEnum | MusicaScalarFieldEnum[]
  }

  /**
   * Musica findFirstOrThrow
   */
  export type MusicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * Filter, which Musica to fetch.
     */
    where?: MusicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicas to fetch.
     */
    orderBy?: MusicaOrderByWithRelationInput | MusicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Musicas.
     */
    cursor?: MusicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Musicas.
     */
    distinct?: MusicaScalarFieldEnum | MusicaScalarFieldEnum[]
  }

  /**
   * Musica findMany
   */
  export type MusicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * Filter, which Musicas to fetch.
     */
    where?: MusicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicas to fetch.
     */
    orderBy?: MusicaOrderByWithRelationInput | MusicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Musicas.
     */
    cursor?: MusicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicas.
     */
    skip?: number
    distinct?: MusicaScalarFieldEnum | MusicaScalarFieldEnum[]
  }

  /**
   * Musica create
   */
  export type MusicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * The data needed to create a Musica.
     */
    data: XOR<MusicaCreateInput, MusicaUncheckedCreateInput>
  }

  /**
   * Musica createMany
   */
  export type MusicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Musicas.
     */
    data: MusicaCreateManyInput | MusicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Musica createManyAndReturn
   */
  export type MusicaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Musicas.
     */
    data: MusicaCreateManyInput | MusicaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Musica update
   */
  export type MusicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * The data needed to update a Musica.
     */
    data: XOR<MusicaUpdateInput, MusicaUncheckedUpdateInput>
    /**
     * Choose, which Musica to update.
     */
    where: MusicaWhereUniqueInput
  }

  /**
   * Musica updateMany
   */
  export type MusicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Musicas.
     */
    data: XOR<MusicaUpdateManyMutationInput, MusicaUncheckedUpdateManyInput>
    /**
     * Filter which Musicas to update
     */
    where?: MusicaWhereInput
  }

  /**
   * Musica upsert
   */
  export type MusicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * The filter to search for the Musica to update in case it exists.
     */
    where: MusicaWhereUniqueInput
    /**
     * In case the Musica found by the `where` argument doesn't exist, create a new Musica with this data.
     */
    create: XOR<MusicaCreateInput, MusicaUncheckedCreateInput>
    /**
     * In case the Musica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MusicaUpdateInput, MusicaUncheckedUpdateInput>
  }

  /**
   * Musica delete
   */
  export type MusicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
    /**
     * Filter which Musica to delete.
     */
    where: MusicaWhereUniqueInput
  }

  /**
   * Musica deleteMany
   */
  export type MusicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Musicas to delete
     */
    where?: MusicaWhereInput
  }

  /**
   * Musica without action
   */
  export type MusicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musica
     */
    select?: MusicaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicaInclude<ExtArgs> | null
  }


  /**
   * Model Kit
   */

  export type AggregateKit = {
    _count: KitCountAggregateOutputType | null
    _min: KitMinAggregateOutputType | null
    _max: KitMaxAggregateOutputType | null
  }

  export type KitMinAggregateOutputType = {
    id: string | null
    title: string | null
    nipe: string | null
    cantado: string | null
    kitUrl: string | null
    letra: string | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KitMaxAggregateOutputType = {
    id: string | null
    title: string | null
    nipe: string | null
    cantado: string | null
    kitUrl: string | null
    letra: string | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KitCountAggregateOutputType = {
    id: number
    title: number
    nipe: number
    cantado: number
    kitUrl: number
    letra: number
    grupoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KitMinAggregateInputType = {
    id?: true
    title?: true
    nipe?: true
    cantado?: true
    kitUrl?: true
    letra?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KitMaxAggregateInputType = {
    id?: true
    title?: true
    nipe?: true
    cantado?: true
    kitUrl?: true
    letra?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KitCountAggregateInputType = {
    id?: true
    title?: true
    nipe?: true
    cantado?: true
    kitUrl?: true
    letra?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kit to aggregate.
     */
    where?: KitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kits to fetch.
     */
    orderBy?: KitOrderByWithRelationInput | KitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kits
    **/
    _count?: true | KitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KitMaxAggregateInputType
  }

  export type GetKitAggregateType<T extends KitAggregateArgs> = {
        [P in keyof T & keyof AggregateKit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKit[P]>
      : GetScalarType<T[P], AggregateKit[P]>
  }




  export type KitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KitWhereInput
    orderBy?: KitOrderByWithAggregationInput | KitOrderByWithAggregationInput[]
    by: KitScalarFieldEnum[] | KitScalarFieldEnum
    having?: KitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KitCountAggregateInputType | true
    _min?: KitMinAggregateInputType
    _max?: KitMaxAggregateInputType
  }

  export type KitGroupByOutputType = {
    id: string
    title: string
    nipe: string
    cantado: string | null
    kitUrl: string
    letra: string | null
    grupoId: string
    createdAt: Date
    updatedAt: Date
    _count: KitCountAggregateOutputType | null
    _min: KitMinAggregateOutputType | null
    _max: KitMaxAggregateOutputType | null
  }

  type GetKitGroupByPayload<T extends KitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KitGroupByOutputType[P]>
            : GetScalarType<T[P], KitGroupByOutputType[P]>
        }
      >
    >


  export type KitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    nipe?: boolean
    cantado?: boolean
    kitUrl?: boolean
    letra?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kit"]>

  export type KitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    nipe?: boolean
    cantado?: boolean
    kitUrl?: boolean
    letra?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kit"]>

  export type KitSelectScalar = {
    id?: boolean
    title?: boolean
    nipe?: boolean
    cantado?: boolean
    kitUrl?: boolean
    letra?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type KitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $KitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kit"
    objects: {
      grupo: Prisma.$GroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      nipe: string
      cantado: string | null
      kitUrl: string
      letra: string | null
      grupoId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kit"]>
    composites: {}
  }

  type KitGetPayload<S extends boolean | null | undefined | KitDefaultArgs> = $Result.GetResult<Prisma.$KitPayload, S>

  type KitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KitCountAggregateInputType | true
    }

  export interface KitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kit'], meta: { name: 'Kit' } }
    /**
     * Find zero or one Kit that matches the filter.
     * @param {KitFindUniqueArgs} args - Arguments to find a Kit
     * @example
     * // Get one Kit
     * const kit = await prisma.kit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KitFindUniqueArgs>(args: SelectSubset<T, KitFindUniqueArgs<ExtArgs>>): Prisma__KitClient<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Kit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KitFindUniqueOrThrowArgs} args - Arguments to find a Kit
     * @example
     * // Get one Kit
     * const kit = await prisma.kit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KitFindUniqueOrThrowArgs>(args: SelectSubset<T, KitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KitClient<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Kit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitFindFirstArgs} args - Arguments to find a Kit
     * @example
     * // Get one Kit
     * const kit = await prisma.kit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KitFindFirstArgs>(args?: SelectSubset<T, KitFindFirstArgs<ExtArgs>>): Prisma__KitClient<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Kit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitFindFirstOrThrowArgs} args - Arguments to find a Kit
     * @example
     * // Get one Kit
     * const kit = await prisma.kit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KitFindFirstOrThrowArgs>(args?: SelectSubset<T, KitFindFirstOrThrowArgs<ExtArgs>>): Prisma__KitClient<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Kits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kits
     * const kits = await prisma.kit.findMany()
     * 
     * // Get first 10 Kits
     * const kits = await prisma.kit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kitWithIdOnly = await prisma.kit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KitFindManyArgs>(args?: SelectSubset<T, KitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Kit.
     * @param {KitCreateArgs} args - Arguments to create a Kit.
     * @example
     * // Create one Kit
     * const Kit = await prisma.kit.create({
     *   data: {
     *     // ... data to create a Kit
     *   }
     * })
     * 
     */
    create<T extends KitCreateArgs>(args: SelectSubset<T, KitCreateArgs<ExtArgs>>): Prisma__KitClient<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Kits.
     * @param {KitCreateManyArgs} args - Arguments to create many Kits.
     * @example
     * // Create many Kits
     * const kit = await prisma.kit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KitCreateManyArgs>(args?: SelectSubset<T, KitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Kits and returns the data saved in the database.
     * @param {KitCreateManyAndReturnArgs} args - Arguments to create many Kits.
     * @example
     * // Create many Kits
     * const kit = await prisma.kit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Kits and only return the `id`
     * const kitWithIdOnly = await prisma.kit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KitCreateManyAndReturnArgs>(args?: SelectSubset<T, KitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Kit.
     * @param {KitDeleteArgs} args - Arguments to delete one Kit.
     * @example
     * // Delete one Kit
     * const Kit = await prisma.kit.delete({
     *   where: {
     *     // ... filter to delete one Kit
     *   }
     * })
     * 
     */
    delete<T extends KitDeleteArgs>(args: SelectSubset<T, KitDeleteArgs<ExtArgs>>): Prisma__KitClient<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Kit.
     * @param {KitUpdateArgs} args - Arguments to update one Kit.
     * @example
     * // Update one Kit
     * const kit = await prisma.kit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KitUpdateArgs>(args: SelectSubset<T, KitUpdateArgs<ExtArgs>>): Prisma__KitClient<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Kits.
     * @param {KitDeleteManyArgs} args - Arguments to filter Kits to delete.
     * @example
     * // Delete a few Kits
     * const { count } = await prisma.kit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KitDeleteManyArgs>(args?: SelectSubset<T, KitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kits
     * const kit = await prisma.kit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KitUpdateManyArgs>(args: SelectSubset<T, KitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kit.
     * @param {KitUpsertArgs} args - Arguments to update or create a Kit.
     * @example
     * // Update or create a Kit
     * const kit = await prisma.kit.upsert({
     *   create: {
     *     // ... data to create a Kit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kit we want to update
     *   }
     * })
     */
    upsert<T extends KitUpsertArgs>(args: SelectSubset<T, KitUpsertArgs<ExtArgs>>): Prisma__KitClient<$Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Kits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitCountArgs} args - Arguments to filter Kits to count.
     * @example
     * // Count the number of Kits
     * const count = await prisma.kit.count({
     *   where: {
     *     // ... the filter for the Kits we want to count
     *   }
     * })
    **/
    count<T extends KitCountArgs>(
      args?: Subset<T, KitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KitAggregateArgs>(args: Subset<T, KitAggregateArgs>): Prisma.PrismaPromise<GetKitAggregateType<T>>

    /**
     * Group by Kit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KitGroupByArgs['orderBy'] }
        : { orderBy?: KitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kit model
   */
  readonly fields: KitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupo<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Kit model
   */ 
  interface KitFieldRefs {
    readonly id: FieldRef<"Kit", 'String'>
    readonly title: FieldRef<"Kit", 'String'>
    readonly nipe: FieldRef<"Kit", 'String'>
    readonly cantado: FieldRef<"Kit", 'String'>
    readonly kitUrl: FieldRef<"Kit", 'String'>
    readonly letra: FieldRef<"Kit", 'String'>
    readonly grupoId: FieldRef<"Kit", 'String'>
    readonly createdAt: FieldRef<"Kit", 'DateTime'>
    readonly updatedAt: FieldRef<"Kit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Kit findUnique
   */
  export type KitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * Filter, which Kit to fetch.
     */
    where: KitWhereUniqueInput
  }

  /**
   * Kit findUniqueOrThrow
   */
  export type KitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * Filter, which Kit to fetch.
     */
    where: KitWhereUniqueInput
  }

  /**
   * Kit findFirst
   */
  export type KitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * Filter, which Kit to fetch.
     */
    where?: KitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kits to fetch.
     */
    orderBy?: KitOrderByWithRelationInput | KitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kits.
     */
    cursor?: KitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kits.
     */
    distinct?: KitScalarFieldEnum | KitScalarFieldEnum[]
  }

  /**
   * Kit findFirstOrThrow
   */
  export type KitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * Filter, which Kit to fetch.
     */
    where?: KitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kits to fetch.
     */
    orderBy?: KitOrderByWithRelationInput | KitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kits.
     */
    cursor?: KitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kits.
     */
    distinct?: KitScalarFieldEnum | KitScalarFieldEnum[]
  }

  /**
   * Kit findMany
   */
  export type KitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * Filter, which Kits to fetch.
     */
    where?: KitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kits to fetch.
     */
    orderBy?: KitOrderByWithRelationInput | KitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kits.
     */
    cursor?: KitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kits.
     */
    skip?: number
    distinct?: KitScalarFieldEnum | KitScalarFieldEnum[]
  }

  /**
   * Kit create
   */
  export type KitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * The data needed to create a Kit.
     */
    data: XOR<KitCreateInput, KitUncheckedCreateInput>
  }

  /**
   * Kit createMany
   */
  export type KitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kits.
     */
    data: KitCreateManyInput | KitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Kit createManyAndReturn
   */
  export type KitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Kits.
     */
    data: KitCreateManyInput | KitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Kit update
   */
  export type KitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * The data needed to update a Kit.
     */
    data: XOR<KitUpdateInput, KitUncheckedUpdateInput>
    /**
     * Choose, which Kit to update.
     */
    where: KitWhereUniqueInput
  }

  /**
   * Kit updateMany
   */
  export type KitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kits.
     */
    data: XOR<KitUpdateManyMutationInput, KitUncheckedUpdateManyInput>
    /**
     * Filter which Kits to update
     */
    where?: KitWhereInput
  }

  /**
   * Kit upsert
   */
  export type KitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * The filter to search for the Kit to update in case it exists.
     */
    where: KitWhereUniqueInput
    /**
     * In case the Kit found by the `where` argument doesn't exist, create a new Kit with this data.
     */
    create: XOR<KitCreateInput, KitUncheckedCreateInput>
    /**
     * In case the Kit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KitUpdateInput, KitUncheckedUpdateInput>
  }

  /**
   * Kit delete
   */
  export type KitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
    /**
     * Filter which Kit to delete.
     */
    where: KitWhereUniqueInput
  }

  /**
   * Kit deleteMany
   */
  export type KitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kits to delete
     */
    where?: KitWhereInput
  }

  /**
   * Kit without action
   */
  export type KitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kit
     */
    select?: KitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitInclude<ExtArgs> | null
  }


  /**
   * Model Agenda
   */

  export type AggregateAgenda = {
    _count: AgendaCountAggregateOutputType | null
    _min: AgendaMinAggregateOutputType | null
    _max: AgendaMaxAggregateOutputType | null
  }

  export type AgendaMinAggregateOutputType = {
    id: string | null
    title: string | null
    descricao: string | null
    endereco: string | null
    data: Date | null
    status: string | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgendaMaxAggregateOutputType = {
    id: string | null
    title: string | null
    descricao: string | null
    endereco: string | null
    data: Date | null
    status: string | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgendaCountAggregateOutputType = {
    id: number
    title: number
    descricao: number
    endereco: number
    data: number
    status: number
    grupoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AgendaMinAggregateInputType = {
    id?: true
    title?: true
    descricao?: true
    endereco?: true
    data?: true
    status?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgendaMaxAggregateInputType = {
    id?: true
    title?: true
    descricao?: true
    endereco?: true
    data?: true
    status?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgendaCountAggregateInputType = {
    id?: true
    title?: true
    descricao?: true
    endereco?: true
    data?: true
    status?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AgendaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agenda to aggregate.
     */
    where?: AgendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agenda to fetch.
     */
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agenda from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agenda.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agenda
    **/
    _count?: true | AgendaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgendaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgendaMaxAggregateInputType
  }

  export type GetAgendaAggregateType<T extends AgendaAggregateArgs> = {
        [P in keyof T & keyof AggregateAgenda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgenda[P]>
      : GetScalarType<T[P], AggregateAgenda[P]>
  }




  export type AgendaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendaWhereInput
    orderBy?: AgendaOrderByWithAggregationInput | AgendaOrderByWithAggregationInput[]
    by: AgendaScalarFieldEnum[] | AgendaScalarFieldEnum
    having?: AgendaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgendaCountAggregateInputType | true
    _min?: AgendaMinAggregateInputType
    _max?: AgendaMaxAggregateInputType
  }

  export type AgendaGroupByOutputType = {
    id: string
    title: string
    descricao: string
    endereco: string | null
    data: Date | null
    status: string
    grupoId: string
    createdAt: Date
    updatedAt: Date
    _count: AgendaCountAggregateOutputType | null
    _min: AgendaMinAggregateOutputType | null
    _max: AgendaMaxAggregateOutputType | null
  }

  type GetAgendaGroupByPayload<T extends AgendaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgendaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgendaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgendaGroupByOutputType[P]>
            : GetScalarType<T[P], AgendaGroupByOutputType[P]>
        }
      >
    >


  export type AgendaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    descricao?: boolean
    endereco?: boolean
    data?: boolean
    status?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agenda"]>

  export type AgendaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    descricao?: boolean
    endereco?: boolean
    data?: boolean
    status?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agenda"]>

  export type AgendaSelectScalar = {
    id?: boolean
    title?: boolean
    descricao?: boolean
    endereco?: boolean
    data?: boolean
    status?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AgendaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }
  export type AgendaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $AgendaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agenda"
    objects: {
      grupo: Prisma.$GroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      descricao: string
      endereco: string | null
      data: Date | null
      status: string
      grupoId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["agenda"]>
    composites: {}
  }

  type AgendaGetPayload<S extends boolean | null | undefined | AgendaDefaultArgs> = $Result.GetResult<Prisma.$AgendaPayload, S>

  type AgendaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgendaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgendaCountAggregateInputType | true
    }

  export interface AgendaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agenda'], meta: { name: 'Agenda' } }
    /**
     * Find zero or one Agenda that matches the filter.
     * @param {AgendaFindUniqueArgs} args - Arguments to find a Agenda
     * @example
     * // Get one Agenda
     * const agenda = await prisma.agenda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgendaFindUniqueArgs>(args: SelectSubset<T, AgendaFindUniqueArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Agenda that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgendaFindUniqueOrThrowArgs} args - Arguments to find a Agenda
     * @example
     * // Get one Agenda
     * const agenda = await prisma.agenda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgendaFindUniqueOrThrowArgs>(args: SelectSubset<T, AgendaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Agenda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaFindFirstArgs} args - Arguments to find a Agenda
     * @example
     * // Get one Agenda
     * const agenda = await prisma.agenda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgendaFindFirstArgs>(args?: SelectSubset<T, AgendaFindFirstArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Agenda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaFindFirstOrThrowArgs} args - Arguments to find a Agenda
     * @example
     * // Get one Agenda
     * const agenda = await prisma.agenda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgendaFindFirstOrThrowArgs>(args?: SelectSubset<T, AgendaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Agenda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agenda
     * const agenda = await prisma.agenda.findMany()
     * 
     * // Get first 10 Agenda
     * const agenda = await prisma.agenda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agendaWithIdOnly = await prisma.agenda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgendaFindManyArgs>(args?: SelectSubset<T, AgendaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Agenda.
     * @param {AgendaCreateArgs} args - Arguments to create a Agenda.
     * @example
     * // Create one Agenda
     * const Agenda = await prisma.agenda.create({
     *   data: {
     *     // ... data to create a Agenda
     *   }
     * })
     * 
     */
    create<T extends AgendaCreateArgs>(args: SelectSubset<T, AgendaCreateArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Agenda.
     * @param {AgendaCreateManyArgs} args - Arguments to create many Agenda.
     * @example
     * // Create many Agenda
     * const agenda = await prisma.agenda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgendaCreateManyArgs>(args?: SelectSubset<T, AgendaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agenda and returns the data saved in the database.
     * @param {AgendaCreateManyAndReturnArgs} args - Arguments to create many Agenda.
     * @example
     * // Create many Agenda
     * const agenda = await prisma.agenda.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agenda and only return the `id`
     * const agendaWithIdOnly = await prisma.agenda.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgendaCreateManyAndReturnArgs>(args?: SelectSubset<T, AgendaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Agenda.
     * @param {AgendaDeleteArgs} args - Arguments to delete one Agenda.
     * @example
     * // Delete one Agenda
     * const Agenda = await prisma.agenda.delete({
     *   where: {
     *     // ... filter to delete one Agenda
     *   }
     * })
     * 
     */
    delete<T extends AgendaDeleteArgs>(args: SelectSubset<T, AgendaDeleteArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Agenda.
     * @param {AgendaUpdateArgs} args - Arguments to update one Agenda.
     * @example
     * // Update one Agenda
     * const agenda = await prisma.agenda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgendaUpdateArgs>(args: SelectSubset<T, AgendaUpdateArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Agenda.
     * @param {AgendaDeleteManyArgs} args - Arguments to filter Agenda to delete.
     * @example
     * // Delete a few Agenda
     * const { count } = await prisma.agenda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgendaDeleteManyArgs>(args?: SelectSubset<T, AgendaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agenda
     * const agenda = await prisma.agenda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgendaUpdateManyArgs>(args: SelectSubset<T, AgendaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agenda.
     * @param {AgendaUpsertArgs} args - Arguments to update or create a Agenda.
     * @example
     * // Update or create a Agenda
     * const agenda = await prisma.agenda.upsert({
     *   create: {
     *     // ... data to create a Agenda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agenda we want to update
     *   }
     * })
     */
    upsert<T extends AgendaUpsertArgs>(args: SelectSubset<T, AgendaUpsertArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Agenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaCountArgs} args - Arguments to filter Agenda to count.
     * @example
     * // Count the number of Agenda
     * const count = await prisma.agenda.count({
     *   where: {
     *     // ... the filter for the Agenda we want to count
     *   }
     * })
    **/
    count<T extends AgendaCountArgs>(
      args?: Subset<T, AgendaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgendaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgendaAggregateArgs>(args: Subset<T, AgendaAggregateArgs>): Prisma.PrismaPromise<GetAgendaAggregateType<T>>

    /**
     * Group by Agenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgendaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgendaGroupByArgs['orderBy'] }
        : { orderBy?: AgendaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgendaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgendaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agenda model
   */
  readonly fields: AgendaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agenda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgendaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupo<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agenda model
   */ 
  interface AgendaFieldRefs {
    readonly id: FieldRef<"Agenda", 'String'>
    readonly title: FieldRef<"Agenda", 'String'>
    readonly descricao: FieldRef<"Agenda", 'String'>
    readonly endereco: FieldRef<"Agenda", 'String'>
    readonly data: FieldRef<"Agenda", 'DateTime'>
    readonly status: FieldRef<"Agenda", 'String'>
    readonly grupoId: FieldRef<"Agenda", 'String'>
    readonly createdAt: FieldRef<"Agenda", 'DateTime'>
    readonly updatedAt: FieldRef<"Agenda", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Agenda findUnique
   */
  export type AgendaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where: AgendaWhereUniqueInput
  }

  /**
   * Agenda findUniqueOrThrow
   */
  export type AgendaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where: AgendaWhereUniqueInput
  }

  /**
   * Agenda findFirst
   */
  export type AgendaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where?: AgendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agenda to fetch.
     */
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agenda.
     */
    cursor?: AgendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agenda from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agenda.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agenda.
     */
    distinct?: AgendaScalarFieldEnum | AgendaScalarFieldEnum[]
  }

  /**
   * Agenda findFirstOrThrow
   */
  export type AgendaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where?: AgendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agenda to fetch.
     */
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agenda.
     */
    cursor?: AgendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agenda from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agenda.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agenda.
     */
    distinct?: AgendaScalarFieldEnum | AgendaScalarFieldEnum[]
  }

  /**
   * Agenda findMany
   */
  export type AgendaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where?: AgendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agenda to fetch.
     */
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agenda.
     */
    cursor?: AgendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agenda from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agenda.
     */
    skip?: number
    distinct?: AgendaScalarFieldEnum | AgendaScalarFieldEnum[]
  }

  /**
   * Agenda create
   */
  export type AgendaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * The data needed to create a Agenda.
     */
    data: XOR<AgendaCreateInput, AgendaUncheckedCreateInput>
  }

  /**
   * Agenda createMany
   */
  export type AgendaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agenda.
     */
    data: AgendaCreateManyInput | AgendaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agenda createManyAndReturn
   */
  export type AgendaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Agenda.
     */
    data: AgendaCreateManyInput | AgendaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Agenda update
   */
  export type AgendaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * The data needed to update a Agenda.
     */
    data: XOR<AgendaUpdateInput, AgendaUncheckedUpdateInput>
    /**
     * Choose, which Agenda to update.
     */
    where: AgendaWhereUniqueInput
  }

  /**
   * Agenda updateMany
   */
  export type AgendaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agenda.
     */
    data: XOR<AgendaUpdateManyMutationInput, AgendaUncheckedUpdateManyInput>
    /**
     * Filter which Agenda to update
     */
    where?: AgendaWhereInput
  }

  /**
   * Agenda upsert
   */
  export type AgendaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * The filter to search for the Agenda to update in case it exists.
     */
    where: AgendaWhereUniqueInput
    /**
     * In case the Agenda found by the `where` argument doesn't exist, create a new Agenda with this data.
     */
    create: XOR<AgendaCreateInput, AgendaUncheckedCreateInput>
    /**
     * In case the Agenda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgendaUpdateInput, AgendaUncheckedUpdateInput>
  }

  /**
   * Agenda delete
   */
  export type AgendaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter which Agenda to delete.
     */
    where: AgendaWhereUniqueInput
  }

  /**
   * Agenda deleteMany
   */
  export type AgendaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agenda to delete
     */
    where?: AgendaWhereInput
  }

  /**
   * Agenda without action
   */
  export type AgendaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
  }


  /**
   * Model Comentario
   */

  export type AggregateComentario = {
    _count: ComentarioCountAggregateOutputType | null
    _min: ComentarioMinAggregateOutputType | null
    _max: ComentarioMaxAggregateOutputType | null
  }

  export type ComentarioMinAggregateOutputType = {
    id: string | null
    descricao: string | null
    autorId: string | null
    grupoId: string | null
    postId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ComentarioMaxAggregateOutputType = {
    id: string | null
    descricao: string | null
    autorId: string | null
    grupoId: string | null
    postId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ComentarioCountAggregateOutputType = {
    id: number
    descricao: number
    autorId: number
    grupoId: number
    postId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ComentarioMinAggregateInputType = {
    id?: true
    descricao?: true
    autorId?: true
    grupoId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ComentarioMaxAggregateInputType = {
    id?: true
    descricao?: true
    autorId?: true
    grupoId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ComentarioCountAggregateInputType = {
    id?: true
    descricao?: true
    autorId?: true
    grupoId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ComentarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comentario to aggregate.
     */
    where?: ComentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: ComentarioOrderByWithRelationInput | ComentarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comentarios
    **/
    _count?: true | ComentarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComentarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComentarioMaxAggregateInputType
  }

  export type GetComentarioAggregateType<T extends ComentarioAggregateArgs> = {
        [P in keyof T & keyof AggregateComentario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComentario[P]>
      : GetScalarType<T[P], AggregateComentario[P]>
  }




  export type ComentarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComentarioWhereInput
    orderBy?: ComentarioOrderByWithAggregationInput | ComentarioOrderByWithAggregationInput[]
    by: ComentarioScalarFieldEnum[] | ComentarioScalarFieldEnum
    having?: ComentarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComentarioCountAggregateInputType | true
    _min?: ComentarioMinAggregateInputType
    _max?: ComentarioMaxAggregateInputType
  }

  export type ComentarioGroupByOutputType = {
    id: string
    descricao: string
    autorId: string | null
    grupoId: string | null
    postId: string | null
    createdAt: Date
    updatedAt: Date
    _count: ComentarioCountAggregateOutputType | null
    _min: ComentarioMinAggregateOutputType | null
    _max: ComentarioMaxAggregateOutputType | null
  }

  type GetComentarioGroupByPayload<T extends ComentarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComentarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComentarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComentarioGroupByOutputType[P]>
            : GetScalarType<T[P], ComentarioGroupByOutputType[P]>
        }
      >
    >


  export type ComentarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    autorId?: boolean
    grupoId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    autor?: boolean | Comentario$autorArgs<ExtArgs>
    grupo?: boolean | Comentario$grupoArgs<ExtArgs>
    post?: boolean | Comentario$postArgs<ExtArgs>
  }, ExtArgs["result"]["comentario"]>

  export type ComentarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    autorId?: boolean
    grupoId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    autor?: boolean | Comentario$autorArgs<ExtArgs>
    grupo?: boolean | Comentario$grupoArgs<ExtArgs>
    post?: boolean | Comentario$postArgs<ExtArgs>
  }, ExtArgs["result"]["comentario"]>

  export type ComentarioSelectScalar = {
    id?: boolean
    descricao?: boolean
    autorId?: boolean
    grupoId?: boolean
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ComentarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    autor?: boolean | Comentario$autorArgs<ExtArgs>
    grupo?: boolean | Comentario$grupoArgs<ExtArgs>
    post?: boolean | Comentario$postArgs<ExtArgs>
  }
  export type ComentarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    autor?: boolean | Comentario$autorArgs<ExtArgs>
    grupo?: boolean | Comentario$grupoArgs<ExtArgs>
    post?: boolean | Comentario$postArgs<ExtArgs>
  }

  export type $ComentarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comentario"
    objects: {
      autor: Prisma.$MemberPayload<ExtArgs> | null
      grupo: Prisma.$GroupPayload<ExtArgs> | null
      post: Prisma.$PostPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      descricao: string
      autorId: string | null
      grupoId: string | null
      postId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comentario"]>
    composites: {}
  }

  type ComentarioGetPayload<S extends boolean | null | undefined | ComentarioDefaultArgs> = $Result.GetResult<Prisma.$ComentarioPayload, S>

  type ComentarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComentarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComentarioCountAggregateInputType | true
    }

  export interface ComentarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comentario'], meta: { name: 'Comentario' } }
    /**
     * Find zero or one Comentario that matches the filter.
     * @param {ComentarioFindUniqueArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComentarioFindUniqueArgs>(args: SelectSubset<T, ComentarioFindUniqueArgs<ExtArgs>>): Prisma__ComentarioClient<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comentario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComentarioFindUniqueOrThrowArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComentarioFindUniqueOrThrowArgs>(args: SelectSubset<T, ComentarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComentarioClient<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comentario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioFindFirstArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComentarioFindFirstArgs>(args?: SelectSubset<T, ComentarioFindFirstArgs<ExtArgs>>): Prisma__ComentarioClient<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comentario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioFindFirstOrThrowArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComentarioFindFirstOrThrowArgs>(args?: SelectSubset<T, ComentarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComentarioClient<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comentarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comentarios
     * const comentarios = await prisma.comentario.findMany()
     * 
     * // Get first 10 Comentarios
     * const comentarios = await prisma.comentario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comentarioWithIdOnly = await prisma.comentario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComentarioFindManyArgs>(args?: SelectSubset<T, ComentarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comentario.
     * @param {ComentarioCreateArgs} args - Arguments to create a Comentario.
     * @example
     * // Create one Comentario
     * const Comentario = await prisma.comentario.create({
     *   data: {
     *     // ... data to create a Comentario
     *   }
     * })
     * 
     */
    create<T extends ComentarioCreateArgs>(args: SelectSubset<T, ComentarioCreateArgs<ExtArgs>>): Prisma__ComentarioClient<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comentarios.
     * @param {ComentarioCreateManyArgs} args - Arguments to create many Comentarios.
     * @example
     * // Create many Comentarios
     * const comentario = await prisma.comentario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComentarioCreateManyArgs>(args?: SelectSubset<T, ComentarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comentarios and returns the data saved in the database.
     * @param {ComentarioCreateManyAndReturnArgs} args - Arguments to create many Comentarios.
     * @example
     * // Create many Comentarios
     * const comentario = await prisma.comentario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comentarios and only return the `id`
     * const comentarioWithIdOnly = await prisma.comentario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComentarioCreateManyAndReturnArgs>(args?: SelectSubset<T, ComentarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comentario.
     * @param {ComentarioDeleteArgs} args - Arguments to delete one Comentario.
     * @example
     * // Delete one Comentario
     * const Comentario = await prisma.comentario.delete({
     *   where: {
     *     // ... filter to delete one Comentario
     *   }
     * })
     * 
     */
    delete<T extends ComentarioDeleteArgs>(args: SelectSubset<T, ComentarioDeleteArgs<ExtArgs>>): Prisma__ComentarioClient<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comentario.
     * @param {ComentarioUpdateArgs} args - Arguments to update one Comentario.
     * @example
     * // Update one Comentario
     * const comentario = await prisma.comentario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComentarioUpdateArgs>(args: SelectSubset<T, ComentarioUpdateArgs<ExtArgs>>): Prisma__ComentarioClient<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comentarios.
     * @param {ComentarioDeleteManyArgs} args - Arguments to filter Comentarios to delete.
     * @example
     * // Delete a few Comentarios
     * const { count } = await prisma.comentario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComentarioDeleteManyArgs>(args?: SelectSubset<T, ComentarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comentarios
     * const comentario = await prisma.comentario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComentarioUpdateManyArgs>(args: SelectSubset<T, ComentarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comentario.
     * @param {ComentarioUpsertArgs} args - Arguments to update or create a Comentario.
     * @example
     * // Update or create a Comentario
     * const comentario = await prisma.comentario.upsert({
     *   create: {
     *     // ... data to create a Comentario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comentario we want to update
     *   }
     * })
     */
    upsert<T extends ComentarioUpsertArgs>(args: SelectSubset<T, ComentarioUpsertArgs<ExtArgs>>): Prisma__ComentarioClient<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioCountArgs} args - Arguments to filter Comentarios to count.
     * @example
     * // Count the number of Comentarios
     * const count = await prisma.comentario.count({
     *   where: {
     *     // ... the filter for the Comentarios we want to count
     *   }
     * })
    **/
    count<T extends ComentarioCountArgs>(
      args?: Subset<T, ComentarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComentarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comentario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComentarioAggregateArgs>(args: Subset<T, ComentarioAggregateArgs>): Prisma.PrismaPromise<GetComentarioAggregateType<T>>

    /**
     * Group by Comentario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComentarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComentarioGroupByArgs['orderBy'] }
        : { orderBy?: ComentarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComentarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComentarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comentario model
   */
  readonly fields: ComentarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comentario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComentarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    autor<T extends Comentario$autorArgs<ExtArgs> = {}>(args?: Subset<T, Comentario$autorArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    grupo<T extends Comentario$grupoArgs<ExtArgs> = {}>(args?: Subset<T, Comentario$grupoArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    post<T extends Comentario$postArgs<ExtArgs> = {}>(args?: Subset<T, Comentario$postArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comentario model
   */ 
  interface ComentarioFieldRefs {
    readonly id: FieldRef<"Comentario", 'String'>
    readonly descricao: FieldRef<"Comentario", 'String'>
    readonly autorId: FieldRef<"Comentario", 'String'>
    readonly grupoId: FieldRef<"Comentario", 'String'>
    readonly postId: FieldRef<"Comentario", 'String'>
    readonly createdAt: FieldRef<"Comentario", 'DateTime'>
    readonly updatedAt: FieldRef<"Comentario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comentario findUnique
   */
  export type ComentarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * Filter, which Comentario to fetch.
     */
    where: ComentarioWhereUniqueInput
  }

  /**
   * Comentario findUniqueOrThrow
   */
  export type ComentarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * Filter, which Comentario to fetch.
     */
    where: ComentarioWhereUniqueInput
  }

  /**
   * Comentario findFirst
   */
  export type ComentarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * Filter, which Comentario to fetch.
     */
    where?: ComentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: ComentarioOrderByWithRelationInput | ComentarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comentarios.
     */
    cursor?: ComentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comentarios.
     */
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }

  /**
   * Comentario findFirstOrThrow
   */
  export type ComentarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * Filter, which Comentario to fetch.
     */
    where?: ComentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: ComentarioOrderByWithRelationInput | ComentarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comentarios.
     */
    cursor?: ComentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comentarios.
     */
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }

  /**
   * Comentario findMany
   */
  export type ComentarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * Filter, which Comentarios to fetch.
     */
    where?: ComentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: ComentarioOrderByWithRelationInput | ComentarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comentarios.
     */
    cursor?: ComentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }

  /**
   * Comentario create
   */
  export type ComentarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Comentario.
     */
    data: XOR<ComentarioCreateInput, ComentarioUncheckedCreateInput>
  }

  /**
   * Comentario createMany
   */
  export type ComentarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comentarios.
     */
    data: ComentarioCreateManyInput | ComentarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comentario createManyAndReturn
   */
  export type ComentarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comentarios.
     */
    data: ComentarioCreateManyInput | ComentarioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comentario update
   */
  export type ComentarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Comentario.
     */
    data: XOR<ComentarioUpdateInput, ComentarioUncheckedUpdateInput>
    /**
     * Choose, which Comentario to update.
     */
    where: ComentarioWhereUniqueInput
  }

  /**
   * Comentario updateMany
   */
  export type ComentarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comentarios.
     */
    data: XOR<ComentarioUpdateManyMutationInput, ComentarioUncheckedUpdateManyInput>
    /**
     * Filter which Comentarios to update
     */
    where?: ComentarioWhereInput
  }

  /**
   * Comentario upsert
   */
  export type ComentarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Comentario to update in case it exists.
     */
    where: ComentarioWhereUniqueInput
    /**
     * In case the Comentario found by the `where` argument doesn't exist, create a new Comentario with this data.
     */
    create: XOR<ComentarioCreateInput, ComentarioUncheckedCreateInput>
    /**
     * In case the Comentario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComentarioUpdateInput, ComentarioUncheckedUpdateInput>
  }

  /**
   * Comentario delete
   */
  export type ComentarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    /**
     * Filter which Comentario to delete.
     */
    where: ComentarioWhereUniqueInput
  }

  /**
   * Comentario deleteMany
   */
  export type ComentarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comentarios to delete
     */
    where?: ComentarioWhereInput
  }

  /**
   * Comentario.autor
   */
  export type Comentario$autorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
  }

  /**
   * Comentario.grupo
   */
  export type Comentario$grupoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
  }

  /**
   * Comentario.post
   */
  export type Comentario$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
  }

  /**
   * Comentario without action
   */
  export type ComentarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
  }


  /**
   * Model Mensalidade
   */

  export type AggregateMensalidade = {
    _count: MensalidadeCountAggregateOutputType | null
    _avg: MensalidadeAvgAggregateOutputType | null
    _sum: MensalidadeSumAggregateOutputType | null
    _min: MensalidadeMinAggregateOutputType | null
    _max: MensalidadeMaxAggregateOutputType | null
  }

  export type MensalidadeAvgAggregateOutputType = {
    valor: number | null
  }

  export type MensalidadeSumAggregateOutputType = {
    valor: number | null
  }

  export type MensalidadeMinAggregateOutputType = {
    id: string | null
    valor: number | null
    descricao: string | null
    vencimento: Date | null
    membroId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MensalidadeMaxAggregateOutputType = {
    id: string | null
    valor: number | null
    descricao: string | null
    vencimento: Date | null
    membroId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MensalidadeCountAggregateOutputType = {
    id: number
    valor: number
    descricao: number
    vencimento: number
    membroId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MensalidadeAvgAggregateInputType = {
    valor?: true
  }

  export type MensalidadeSumAggregateInputType = {
    valor?: true
  }

  export type MensalidadeMinAggregateInputType = {
    id?: true
    valor?: true
    descricao?: true
    vencimento?: true
    membroId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MensalidadeMaxAggregateInputType = {
    id?: true
    valor?: true
    descricao?: true
    vencimento?: true
    membroId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MensalidadeCountAggregateInputType = {
    id?: true
    valor?: true
    descricao?: true
    vencimento?: true
    membroId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MensalidadeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mensalidade to aggregate.
     */
    where?: MensalidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensalidades to fetch.
     */
    orderBy?: MensalidadeOrderByWithRelationInput | MensalidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MensalidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensalidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensalidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mensalidades
    **/
    _count?: true | MensalidadeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensalidadeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensalidadeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensalidadeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensalidadeMaxAggregateInputType
  }

  export type GetMensalidadeAggregateType<T extends MensalidadeAggregateArgs> = {
        [P in keyof T & keyof AggregateMensalidade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensalidade[P]>
      : GetScalarType<T[P], AggregateMensalidade[P]>
  }




  export type MensalidadeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensalidadeWhereInput
    orderBy?: MensalidadeOrderByWithAggregationInput | MensalidadeOrderByWithAggregationInput[]
    by: MensalidadeScalarFieldEnum[] | MensalidadeScalarFieldEnum
    having?: MensalidadeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensalidadeCountAggregateInputType | true
    _avg?: MensalidadeAvgAggregateInputType
    _sum?: MensalidadeSumAggregateInputType
    _min?: MensalidadeMinAggregateInputType
    _max?: MensalidadeMaxAggregateInputType
  }

  export type MensalidadeGroupByOutputType = {
    id: string
    valor: number
    descricao: string | null
    vencimento: Date
    membroId: string
    createdAt: Date
    updatedAt: Date
    _count: MensalidadeCountAggregateOutputType | null
    _avg: MensalidadeAvgAggregateOutputType | null
    _sum: MensalidadeSumAggregateOutputType | null
    _min: MensalidadeMinAggregateOutputType | null
    _max: MensalidadeMaxAggregateOutputType | null
  }

  type GetMensalidadeGroupByPayload<T extends MensalidadeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MensalidadeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensalidadeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensalidadeGroupByOutputType[P]>
            : GetScalarType<T[P], MensalidadeGroupByOutputType[P]>
        }
      >
    >


  export type MensalidadeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    descricao?: boolean
    vencimento?: boolean
    membroId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    membro?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mensalidade"]>

  export type MensalidadeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    descricao?: boolean
    vencimento?: boolean
    membroId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    membro?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mensalidade"]>

  export type MensalidadeSelectScalar = {
    id?: boolean
    valor?: boolean
    descricao?: boolean
    vencimento?: boolean
    membroId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MensalidadeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membro?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type MensalidadeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membro?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $MensalidadePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mensalidade"
    objects: {
      membro: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      valor: number
      descricao: string | null
      vencimento: Date
      membroId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mensalidade"]>
    composites: {}
  }

  type MensalidadeGetPayload<S extends boolean | null | undefined | MensalidadeDefaultArgs> = $Result.GetResult<Prisma.$MensalidadePayload, S>

  type MensalidadeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MensalidadeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MensalidadeCountAggregateInputType | true
    }

  export interface MensalidadeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mensalidade'], meta: { name: 'Mensalidade' } }
    /**
     * Find zero or one Mensalidade that matches the filter.
     * @param {MensalidadeFindUniqueArgs} args - Arguments to find a Mensalidade
     * @example
     * // Get one Mensalidade
     * const mensalidade = await prisma.mensalidade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MensalidadeFindUniqueArgs>(args: SelectSubset<T, MensalidadeFindUniqueArgs<ExtArgs>>): Prisma__MensalidadeClient<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mensalidade that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MensalidadeFindUniqueOrThrowArgs} args - Arguments to find a Mensalidade
     * @example
     * // Get one Mensalidade
     * const mensalidade = await prisma.mensalidade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MensalidadeFindUniqueOrThrowArgs>(args: SelectSubset<T, MensalidadeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MensalidadeClient<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mensalidade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensalidadeFindFirstArgs} args - Arguments to find a Mensalidade
     * @example
     * // Get one Mensalidade
     * const mensalidade = await prisma.mensalidade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MensalidadeFindFirstArgs>(args?: SelectSubset<T, MensalidadeFindFirstArgs<ExtArgs>>): Prisma__MensalidadeClient<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mensalidade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensalidadeFindFirstOrThrowArgs} args - Arguments to find a Mensalidade
     * @example
     * // Get one Mensalidade
     * const mensalidade = await prisma.mensalidade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MensalidadeFindFirstOrThrowArgs>(args?: SelectSubset<T, MensalidadeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MensalidadeClient<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Mensalidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensalidadeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mensalidades
     * const mensalidades = await prisma.mensalidade.findMany()
     * 
     * // Get first 10 Mensalidades
     * const mensalidades = await prisma.mensalidade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensalidadeWithIdOnly = await prisma.mensalidade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MensalidadeFindManyArgs>(args?: SelectSubset<T, MensalidadeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mensalidade.
     * @param {MensalidadeCreateArgs} args - Arguments to create a Mensalidade.
     * @example
     * // Create one Mensalidade
     * const Mensalidade = await prisma.mensalidade.create({
     *   data: {
     *     // ... data to create a Mensalidade
     *   }
     * })
     * 
     */
    create<T extends MensalidadeCreateArgs>(args: SelectSubset<T, MensalidadeCreateArgs<ExtArgs>>): Prisma__MensalidadeClient<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Mensalidades.
     * @param {MensalidadeCreateManyArgs} args - Arguments to create many Mensalidades.
     * @example
     * // Create many Mensalidades
     * const mensalidade = await prisma.mensalidade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MensalidadeCreateManyArgs>(args?: SelectSubset<T, MensalidadeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mensalidades and returns the data saved in the database.
     * @param {MensalidadeCreateManyAndReturnArgs} args - Arguments to create many Mensalidades.
     * @example
     * // Create many Mensalidades
     * const mensalidade = await prisma.mensalidade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mensalidades and only return the `id`
     * const mensalidadeWithIdOnly = await prisma.mensalidade.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MensalidadeCreateManyAndReturnArgs>(args?: SelectSubset<T, MensalidadeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Mensalidade.
     * @param {MensalidadeDeleteArgs} args - Arguments to delete one Mensalidade.
     * @example
     * // Delete one Mensalidade
     * const Mensalidade = await prisma.mensalidade.delete({
     *   where: {
     *     // ... filter to delete one Mensalidade
     *   }
     * })
     * 
     */
    delete<T extends MensalidadeDeleteArgs>(args: SelectSubset<T, MensalidadeDeleteArgs<ExtArgs>>): Prisma__MensalidadeClient<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mensalidade.
     * @param {MensalidadeUpdateArgs} args - Arguments to update one Mensalidade.
     * @example
     * // Update one Mensalidade
     * const mensalidade = await prisma.mensalidade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MensalidadeUpdateArgs>(args: SelectSubset<T, MensalidadeUpdateArgs<ExtArgs>>): Prisma__MensalidadeClient<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Mensalidades.
     * @param {MensalidadeDeleteManyArgs} args - Arguments to filter Mensalidades to delete.
     * @example
     * // Delete a few Mensalidades
     * const { count } = await prisma.mensalidade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MensalidadeDeleteManyArgs>(args?: SelectSubset<T, MensalidadeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mensalidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensalidadeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mensalidades
     * const mensalidade = await prisma.mensalidade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MensalidadeUpdateManyArgs>(args: SelectSubset<T, MensalidadeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mensalidade.
     * @param {MensalidadeUpsertArgs} args - Arguments to update or create a Mensalidade.
     * @example
     * // Update or create a Mensalidade
     * const mensalidade = await prisma.mensalidade.upsert({
     *   create: {
     *     // ... data to create a Mensalidade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mensalidade we want to update
     *   }
     * })
     */
    upsert<T extends MensalidadeUpsertArgs>(args: SelectSubset<T, MensalidadeUpsertArgs<ExtArgs>>): Prisma__MensalidadeClient<$Result.GetResult<Prisma.$MensalidadePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Mensalidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensalidadeCountArgs} args - Arguments to filter Mensalidades to count.
     * @example
     * // Count the number of Mensalidades
     * const count = await prisma.mensalidade.count({
     *   where: {
     *     // ... the filter for the Mensalidades we want to count
     *   }
     * })
    **/
    count<T extends MensalidadeCountArgs>(
      args?: Subset<T, MensalidadeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensalidadeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mensalidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensalidadeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensalidadeAggregateArgs>(args: Subset<T, MensalidadeAggregateArgs>): Prisma.PrismaPromise<GetMensalidadeAggregateType<T>>

    /**
     * Group by Mensalidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensalidadeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MensalidadeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MensalidadeGroupByArgs['orderBy'] }
        : { orderBy?: MensalidadeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MensalidadeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensalidadeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mensalidade model
   */
  readonly fields: MensalidadeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mensalidade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MensalidadeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membro<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mensalidade model
   */ 
  interface MensalidadeFieldRefs {
    readonly id: FieldRef<"Mensalidade", 'String'>
    readonly valor: FieldRef<"Mensalidade", 'Float'>
    readonly descricao: FieldRef<"Mensalidade", 'String'>
    readonly vencimento: FieldRef<"Mensalidade", 'DateTime'>
    readonly membroId: FieldRef<"Mensalidade", 'String'>
    readonly createdAt: FieldRef<"Mensalidade", 'DateTime'>
    readonly updatedAt: FieldRef<"Mensalidade", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Mensalidade findUnique
   */
  export type MensalidadeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * Filter, which Mensalidade to fetch.
     */
    where: MensalidadeWhereUniqueInput
  }

  /**
   * Mensalidade findUniqueOrThrow
   */
  export type MensalidadeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * Filter, which Mensalidade to fetch.
     */
    where: MensalidadeWhereUniqueInput
  }

  /**
   * Mensalidade findFirst
   */
  export type MensalidadeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * Filter, which Mensalidade to fetch.
     */
    where?: MensalidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensalidades to fetch.
     */
    orderBy?: MensalidadeOrderByWithRelationInput | MensalidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensalidades.
     */
    cursor?: MensalidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensalidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensalidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensalidades.
     */
    distinct?: MensalidadeScalarFieldEnum | MensalidadeScalarFieldEnum[]
  }

  /**
   * Mensalidade findFirstOrThrow
   */
  export type MensalidadeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * Filter, which Mensalidade to fetch.
     */
    where?: MensalidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensalidades to fetch.
     */
    orderBy?: MensalidadeOrderByWithRelationInput | MensalidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensalidades.
     */
    cursor?: MensalidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensalidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensalidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensalidades.
     */
    distinct?: MensalidadeScalarFieldEnum | MensalidadeScalarFieldEnum[]
  }

  /**
   * Mensalidade findMany
   */
  export type MensalidadeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * Filter, which Mensalidades to fetch.
     */
    where?: MensalidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensalidades to fetch.
     */
    orderBy?: MensalidadeOrderByWithRelationInput | MensalidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mensalidades.
     */
    cursor?: MensalidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensalidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensalidades.
     */
    skip?: number
    distinct?: MensalidadeScalarFieldEnum | MensalidadeScalarFieldEnum[]
  }

  /**
   * Mensalidade create
   */
  export type MensalidadeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * The data needed to create a Mensalidade.
     */
    data: XOR<MensalidadeCreateInput, MensalidadeUncheckedCreateInput>
  }

  /**
   * Mensalidade createMany
   */
  export type MensalidadeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mensalidades.
     */
    data: MensalidadeCreateManyInput | MensalidadeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mensalidade createManyAndReturn
   */
  export type MensalidadeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Mensalidades.
     */
    data: MensalidadeCreateManyInput | MensalidadeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Mensalidade update
   */
  export type MensalidadeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * The data needed to update a Mensalidade.
     */
    data: XOR<MensalidadeUpdateInput, MensalidadeUncheckedUpdateInput>
    /**
     * Choose, which Mensalidade to update.
     */
    where: MensalidadeWhereUniqueInput
  }

  /**
   * Mensalidade updateMany
   */
  export type MensalidadeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mensalidades.
     */
    data: XOR<MensalidadeUpdateManyMutationInput, MensalidadeUncheckedUpdateManyInput>
    /**
     * Filter which Mensalidades to update
     */
    where?: MensalidadeWhereInput
  }

  /**
   * Mensalidade upsert
   */
  export type MensalidadeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * The filter to search for the Mensalidade to update in case it exists.
     */
    where: MensalidadeWhereUniqueInput
    /**
     * In case the Mensalidade found by the `where` argument doesn't exist, create a new Mensalidade with this data.
     */
    create: XOR<MensalidadeCreateInput, MensalidadeUncheckedCreateInput>
    /**
     * In case the Mensalidade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MensalidadeUpdateInput, MensalidadeUncheckedUpdateInput>
  }

  /**
   * Mensalidade delete
   */
  export type MensalidadeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
    /**
     * Filter which Mensalidade to delete.
     */
    where: MensalidadeWhereUniqueInput
  }

  /**
   * Mensalidade deleteMany
   */
  export type MensalidadeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mensalidades to delete
     */
    where?: MensalidadeWhereInput
  }

  /**
   * Mensalidade without action
   */
  export type MensalidadeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensalidade
     */
    select?: MensalidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensalidadeInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    title: string | null
    descricao: string | null
    imagem: string | null
    grupoId: string | null
    autorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    title: string | null
    descricao: string | null
    imagem: string | null
    grupoId: string | null
    autorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    descricao: number
    imagem: number
    grupoId: number
    autorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    descricao?: true
    imagem?: true
    grupoId?: true
    autorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    descricao?: true
    imagem?: true
    grupoId?: true
    autorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    descricao?: true
    imagem?: true
    grupoId?: true
    autorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    title: string
    descricao: string
    imagem: string | null
    grupoId: string
    autorId: string
    createdAt: Date
    updatedAt: Date
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    descricao?: boolean
    imagem?: boolean
    grupoId?: boolean
    autorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
    autor?: boolean | MemberDefaultArgs<ExtArgs>
    comentarios?: boolean | Post$comentariosArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    descricao?: boolean
    imagem?: boolean
    grupoId?: boolean
    autorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
    autor?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    title?: boolean
    descricao?: boolean
    imagem?: boolean
    grupoId?: boolean
    autorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
    autor?: boolean | MemberDefaultArgs<ExtArgs>
    comentarios?: boolean | Post$comentariosArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GroupDefaultArgs<ExtArgs>
    autor?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      grupo: Prisma.$GroupPayload<ExtArgs>
      autor: Prisma.$MemberPayload<ExtArgs>
      comentarios: Prisma.$ComentarioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      descricao: string
      imagem: string | null
      grupoId: string
      autorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupo<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    autor<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comentarios<T extends Post$comentariosArgs<ExtArgs> = {}>(args?: Subset<T, Post$comentariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComentarioPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly title: FieldRef<"Post", 'String'>
    readonly descricao: FieldRef<"Post", 'String'>
    readonly imagem: FieldRef<"Post", 'String'>
    readonly grupoId: FieldRef<"Post", 'String'>
    readonly autorId: FieldRef<"Post", 'String'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }

  /**
   * Post.comentarios
   */
  export type Post$comentariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comentario
     */
    select?: ComentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComentarioInclude<ExtArgs> | null
    where?: ComentarioWhereInput
    orderBy?: ComentarioOrderByWithRelationInput | ComentarioOrderByWithRelationInput[]
    cursor?: ComentarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GroupScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    senha: 'senha',
    isAdmin: 'isAdmin',
    ImgPerfil: 'ImgPerfil',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const MemberScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    senha: 'senha',
    imgPerfil: 'imgPerfil',
    nascimento: 'nascimento',
    nipe: 'nipe',
    cargo: 'cargo',
    isAdmin: 'isAdmin',
    grupoId: 'grupoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const MusicaScalarFieldEnum: {
    id: 'id',
    title: 'title',
    musicUrl: 'musicUrl',
    capaUrl: 'capaUrl',
    letra: 'letra',
    artista: 'artista',
    grupoId: 'grupoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MusicaScalarFieldEnum = (typeof MusicaScalarFieldEnum)[keyof typeof MusicaScalarFieldEnum]


  export const KitScalarFieldEnum: {
    id: 'id',
    title: 'title',
    nipe: 'nipe',
    cantado: 'cantado',
    kitUrl: 'kitUrl',
    letra: 'letra',
    grupoId: 'grupoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KitScalarFieldEnum = (typeof KitScalarFieldEnum)[keyof typeof KitScalarFieldEnum]


  export const AgendaScalarFieldEnum: {
    id: 'id',
    title: 'title',
    descricao: 'descricao',
    endereco: 'endereco',
    data: 'data',
    status: 'status',
    grupoId: 'grupoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AgendaScalarFieldEnum = (typeof AgendaScalarFieldEnum)[keyof typeof AgendaScalarFieldEnum]


  export const ComentarioScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    autorId: 'autorId',
    grupoId: 'grupoId',
    postId: 'postId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ComentarioScalarFieldEnum = (typeof ComentarioScalarFieldEnum)[keyof typeof ComentarioScalarFieldEnum]


  export const MensalidadeScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    descricao: 'descricao',
    vencimento: 'vencimento',
    membroId: 'membroId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MensalidadeScalarFieldEnum = (typeof MensalidadeScalarFieldEnum)[keyof typeof MensalidadeScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    descricao: 'descricao',
    imagem: 'imagem',
    grupoId: 'grupoId',
    autorId: 'autorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: StringFilter<"Group"> | string
    nome?: StringFilter<"Group"> | string
    email?: StringFilter<"Group"> | string
    telefone?: StringNullableFilter<"Group"> | string | null
    senha?: StringFilter<"Group"> | string
    isAdmin?: BoolFilter<"Group"> | boolean
    ImgPerfil?: StringNullableFilter<"Group"> | string | null
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    membros?: MemberListRelationFilter
    musicas?: MusicaListRelationFilter
    kits?: KitListRelationFilter
    agendas?: AgendaListRelationFilter
    posts?: PostListRelationFilter
    comentarios?: ComentarioListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    senha?: SortOrder
    isAdmin?: SortOrder
    ImgPerfil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    membros?: MemberOrderByRelationAggregateInput
    musicas?: MusicaOrderByRelationAggregateInput
    kits?: KitOrderByRelationAggregateInput
    agendas?: AgendaOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    comentarios?: ComentarioOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    nome?: StringFilter<"Group"> | string
    telefone?: StringNullableFilter<"Group"> | string | null
    senha?: StringFilter<"Group"> | string
    isAdmin?: BoolFilter<"Group"> | boolean
    ImgPerfil?: StringNullableFilter<"Group"> | string | null
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    membros?: MemberListRelationFilter
    musicas?: MusicaListRelationFilter
    kits?: KitListRelationFilter
    agendas?: AgendaListRelationFilter
    posts?: PostListRelationFilter
    comentarios?: ComentarioListRelationFilter
  }, "id" | "email">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    senha?: SortOrder
    isAdmin?: SortOrder
    ImgPerfil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Group"> | string
    nome?: StringWithAggregatesFilter<"Group"> | string
    email?: StringWithAggregatesFilter<"Group"> | string
    telefone?: StringNullableWithAggregatesFilter<"Group"> | string | null
    senha?: StringWithAggregatesFilter<"Group"> | string
    isAdmin?: BoolWithAggregatesFilter<"Group"> | boolean
    ImgPerfil?: StringNullableWithAggregatesFilter<"Group"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Group"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Group"> | Date | string
  }

  export type MemberWhereInput = {
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    id?: StringFilter<"Member"> | string
    nome?: StringFilter<"Member"> | string
    email?: StringFilter<"Member"> | string
    telefone?: StringNullableFilter<"Member"> | string | null
    senha?: StringFilter<"Member"> | string
    imgPerfil?: StringNullableFilter<"Member"> | string | null
    nascimento?: DateTimeFilter<"Member"> | Date | string
    nipe?: StringFilter<"Member"> | string
    cargo?: StringFilter<"Member"> | string
    isAdmin?: BoolFilter<"Member"> | boolean
    grupoId?: StringFilter<"Member"> | string
    createdAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
    posts?: PostListRelationFilter
    comentarios?: ComentarioListRelationFilter
    mensalidades?: MensalidadeListRelationFilter
  }

  export type MemberOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    senha?: SortOrder
    imgPerfil?: SortOrderInput | SortOrder
    nascimento?: SortOrder
    nipe?: SortOrder
    cargo?: SortOrder
    isAdmin?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grupo?: GroupOrderByWithRelationInput
    posts?: PostOrderByRelationAggregateInput
    comentarios?: ComentarioOrderByRelationAggregateInput
    mensalidades?: MensalidadeOrderByRelationAggregateInput
  }

  export type MemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    nome?: StringFilter<"Member"> | string
    telefone?: StringNullableFilter<"Member"> | string | null
    senha?: StringFilter<"Member"> | string
    imgPerfil?: StringNullableFilter<"Member"> | string | null
    nascimento?: DateTimeFilter<"Member"> | Date | string
    nipe?: StringFilter<"Member"> | string
    cargo?: StringFilter<"Member"> | string
    isAdmin?: BoolFilter<"Member"> | boolean
    grupoId?: StringFilter<"Member"> | string
    createdAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
    posts?: PostListRelationFilter
    comentarios?: ComentarioListRelationFilter
    mensalidades?: MensalidadeListRelationFilter
  }, "id" | "email">

  export type MemberOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    senha?: SortOrder
    imgPerfil?: SortOrderInput | SortOrder
    nascimento?: SortOrder
    nipe?: SortOrder
    cargo?: SortOrder
    isAdmin?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MemberCountOrderByAggregateInput
    _max?: MemberMaxOrderByAggregateInput
    _min?: MemberMinOrderByAggregateInput
  }

  export type MemberScalarWhereWithAggregatesInput = {
    AND?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    OR?: MemberScalarWhereWithAggregatesInput[]
    NOT?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Member"> | string
    nome?: StringWithAggregatesFilter<"Member"> | string
    email?: StringWithAggregatesFilter<"Member"> | string
    telefone?: StringNullableWithAggregatesFilter<"Member"> | string | null
    senha?: StringWithAggregatesFilter<"Member"> | string
    imgPerfil?: StringNullableWithAggregatesFilter<"Member"> | string | null
    nascimento?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    nipe?: StringWithAggregatesFilter<"Member"> | string
    cargo?: StringWithAggregatesFilter<"Member"> | string
    isAdmin?: BoolWithAggregatesFilter<"Member"> | boolean
    grupoId?: StringWithAggregatesFilter<"Member"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
  }

  export type MusicaWhereInput = {
    AND?: MusicaWhereInput | MusicaWhereInput[]
    OR?: MusicaWhereInput[]
    NOT?: MusicaWhereInput | MusicaWhereInput[]
    id?: StringFilter<"Musica"> | string
    title?: StringFilter<"Musica"> | string
    musicUrl?: StringFilter<"Musica"> | string
    capaUrl?: StringFilter<"Musica"> | string
    letra?: StringNullableFilter<"Musica"> | string | null
    artista?: StringNullableFilter<"Musica"> | string | null
    grupoId?: StringFilter<"Musica"> | string
    createdAt?: DateTimeFilter<"Musica"> | Date | string
    updatedAt?: DateTimeFilter<"Musica"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
  }

  export type MusicaOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    musicUrl?: SortOrder
    capaUrl?: SortOrder
    letra?: SortOrderInput | SortOrder
    artista?: SortOrderInput | SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grupo?: GroupOrderByWithRelationInput
  }

  export type MusicaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MusicaWhereInput | MusicaWhereInput[]
    OR?: MusicaWhereInput[]
    NOT?: MusicaWhereInput | MusicaWhereInput[]
    title?: StringFilter<"Musica"> | string
    musicUrl?: StringFilter<"Musica"> | string
    capaUrl?: StringFilter<"Musica"> | string
    letra?: StringNullableFilter<"Musica"> | string | null
    artista?: StringNullableFilter<"Musica"> | string | null
    grupoId?: StringFilter<"Musica"> | string
    createdAt?: DateTimeFilter<"Musica"> | Date | string
    updatedAt?: DateTimeFilter<"Musica"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
  }, "id">

  export type MusicaOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    musicUrl?: SortOrder
    capaUrl?: SortOrder
    letra?: SortOrderInput | SortOrder
    artista?: SortOrderInput | SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MusicaCountOrderByAggregateInput
    _max?: MusicaMaxOrderByAggregateInput
    _min?: MusicaMinOrderByAggregateInput
  }

  export type MusicaScalarWhereWithAggregatesInput = {
    AND?: MusicaScalarWhereWithAggregatesInput | MusicaScalarWhereWithAggregatesInput[]
    OR?: MusicaScalarWhereWithAggregatesInput[]
    NOT?: MusicaScalarWhereWithAggregatesInput | MusicaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Musica"> | string
    title?: StringWithAggregatesFilter<"Musica"> | string
    musicUrl?: StringWithAggregatesFilter<"Musica"> | string
    capaUrl?: StringWithAggregatesFilter<"Musica"> | string
    letra?: StringNullableWithAggregatesFilter<"Musica"> | string | null
    artista?: StringNullableWithAggregatesFilter<"Musica"> | string | null
    grupoId?: StringWithAggregatesFilter<"Musica"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Musica"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Musica"> | Date | string
  }

  export type KitWhereInput = {
    AND?: KitWhereInput | KitWhereInput[]
    OR?: KitWhereInput[]
    NOT?: KitWhereInput | KitWhereInput[]
    id?: StringFilter<"Kit"> | string
    title?: StringFilter<"Kit"> | string
    nipe?: StringFilter<"Kit"> | string
    cantado?: StringNullableFilter<"Kit"> | string | null
    kitUrl?: StringFilter<"Kit"> | string
    letra?: StringNullableFilter<"Kit"> | string | null
    grupoId?: StringFilter<"Kit"> | string
    createdAt?: DateTimeFilter<"Kit"> | Date | string
    updatedAt?: DateTimeFilter<"Kit"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
  }

  export type KitOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    nipe?: SortOrder
    cantado?: SortOrderInput | SortOrder
    kitUrl?: SortOrder
    letra?: SortOrderInput | SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grupo?: GroupOrderByWithRelationInput
  }

  export type KitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KitWhereInput | KitWhereInput[]
    OR?: KitWhereInput[]
    NOT?: KitWhereInput | KitWhereInput[]
    title?: StringFilter<"Kit"> | string
    nipe?: StringFilter<"Kit"> | string
    cantado?: StringNullableFilter<"Kit"> | string | null
    kitUrl?: StringFilter<"Kit"> | string
    letra?: StringNullableFilter<"Kit"> | string | null
    grupoId?: StringFilter<"Kit"> | string
    createdAt?: DateTimeFilter<"Kit"> | Date | string
    updatedAt?: DateTimeFilter<"Kit"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
  }, "id">

  export type KitOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    nipe?: SortOrder
    cantado?: SortOrderInput | SortOrder
    kitUrl?: SortOrder
    letra?: SortOrderInput | SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KitCountOrderByAggregateInput
    _max?: KitMaxOrderByAggregateInput
    _min?: KitMinOrderByAggregateInput
  }

  export type KitScalarWhereWithAggregatesInput = {
    AND?: KitScalarWhereWithAggregatesInput | KitScalarWhereWithAggregatesInput[]
    OR?: KitScalarWhereWithAggregatesInput[]
    NOT?: KitScalarWhereWithAggregatesInput | KitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Kit"> | string
    title?: StringWithAggregatesFilter<"Kit"> | string
    nipe?: StringWithAggregatesFilter<"Kit"> | string
    cantado?: StringNullableWithAggregatesFilter<"Kit"> | string | null
    kitUrl?: StringWithAggregatesFilter<"Kit"> | string
    letra?: StringNullableWithAggregatesFilter<"Kit"> | string | null
    grupoId?: StringWithAggregatesFilter<"Kit"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Kit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Kit"> | Date | string
  }

  export type AgendaWhereInput = {
    AND?: AgendaWhereInput | AgendaWhereInput[]
    OR?: AgendaWhereInput[]
    NOT?: AgendaWhereInput | AgendaWhereInput[]
    id?: StringFilter<"Agenda"> | string
    title?: StringFilter<"Agenda"> | string
    descricao?: StringFilter<"Agenda"> | string
    endereco?: StringNullableFilter<"Agenda"> | string | null
    data?: DateTimeNullableFilter<"Agenda"> | Date | string | null
    status?: StringFilter<"Agenda"> | string
    grupoId?: StringFilter<"Agenda"> | string
    createdAt?: DateTimeFilter<"Agenda"> | Date | string
    updatedAt?: DateTimeFilter<"Agenda"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
  }

  export type AgendaOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    status?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grupo?: GroupOrderByWithRelationInput
  }

  export type AgendaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgendaWhereInput | AgendaWhereInput[]
    OR?: AgendaWhereInput[]
    NOT?: AgendaWhereInput | AgendaWhereInput[]
    title?: StringFilter<"Agenda"> | string
    descricao?: StringFilter<"Agenda"> | string
    endereco?: StringNullableFilter<"Agenda"> | string | null
    data?: DateTimeNullableFilter<"Agenda"> | Date | string | null
    status?: StringFilter<"Agenda"> | string
    grupoId?: StringFilter<"Agenda"> | string
    createdAt?: DateTimeFilter<"Agenda"> | Date | string
    updatedAt?: DateTimeFilter<"Agenda"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
  }, "id">

  export type AgendaOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    status?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AgendaCountOrderByAggregateInput
    _max?: AgendaMaxOrderByAggregateInput
    _min?: AgendaMinOrderByAggregateInput
  }

  export type AgendaScalarWhereWithAggregatesInput = {
    AND?: AgendaScalarWhereWithAggregatesInput | AgendaScalarWhereWithAggregatesInput[]
    OR?: AgendaScalarWhereWithAggregatesInput[]
    NOT?: AgendaScalarWhereWithAggregatesInput | AgendaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agenda"> | string
    title?: StringWithAggregatesFilter<"Agenda"> | string
    descricao?: StringWithAggregatesFilter<"Agenda"> | string
    endereco?: StringNullableWithAggregatesFilter<"Agenda"> | string | null
    data?: DateTimeNullableWithAggregatesFilter<"Agenda"> | Date | string | null
    status?: StringWithAggregatesFilter<"Agenda"> | string
    grupoId?: StringWithAggregatesFilter<"Agenda"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Agenda"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Agenda"> | Date | string
  }

  export type ComentarioWhereInput = {
    AND?: ComentarioWhereInput | ComentarioWhereInput[]
    OR?: ComentarioWhereInput[]
    NOT?: ComentarioWhereInput | ComentarioWhereInput[]
    id?: StringFilter<"Comentario"> | string
    descricao?: StringFilter<"Comentario"> | string
    autorId?: StringNullableFilter<"Comentario"> | string | null
    grupoId?: StringNullableFilter<"Comentario"> | string | null
    postId?: StringNullableFilter<"Comentario"> | string | null
    createdAt?: DateTimeFilter<"Comentario"> | Date | string
    updatedAt?: DateTimeFilter<"Comentario"> | Date | string
    autor?: XOR<MemberNullableRelationFilter, MemberWhereInput> | null
    grupo?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    post?: XOR<PostNullableRelationFilter, PostWhereInput> | null
  }

  export type ComentarioOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    autorId?: SortOrderInput | SortOrder
    grupoId?: SortOrderInput | SortOrder
    postId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    autor?: MemberOrderByWithRelationInput
    grupo?: GroupOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type ComentarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ComentarioWhereInput | ComentarioWhereInput[]
    OR?: ComentarioWhereInput[]
    NOT?: ComentarioWhereInput | ComentarioWhereInput[]
    descricao?: StringFilter<"Comentario"> | string
    autorId?: StringNullableFilter<"Comentario"> | string | null
    grupoId?: StringNullableFilter<"Comentario"> | string | null
    postId?: StringNullableFilter<"Comentario"> | string | null
    createdAt?: DateTimeFilter<"Comentario"> | Date | string
    updatedAt?: DateTimeFilter<"Comentario"> | Date | string
    autor?: XOR<MemberNullableRelationFilter, MemberWhereInput> | null
    grupo?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    post?: XOR<PostNullableRelationFilter, PostWhereInput> | null
  }, "id">

  export type ComentarioOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    autorId?: SortOrderInput | SortOrder
    grupoId?: SortOrderInput | SortOrder
    postId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ComentarioCountOrderByAggregateInput
    _max?: ComentarioMaxOrderByAggregateInput
    _min?: ComentarioMinOrderByAggregateInput
  }

  export type ComentarioScalarWhereWithAggregatesInput = {
    AND?: ComentarioScalarWhereWithAggregatesInput | ComentarioScalarWhereWithAggregatesInput[]
    OR?: ComentarioScalarWhereWithAggregatesInput[]
    NOT?: ComentarioScalarWhereWithAggregatesInput | ComentarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comentario"> | string
    descricao?: StringWithAggregatesFilter<"Comentario"> | string
    autorId?: StringNullableWithAggregatesFilter<"Comentario"> | string | null
    grupoId?: StringNullableWithAggregatesFilter<"Comentario"> | string | null
    postId?: StringNullableWithAggregatesFilter<"Comentario"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Comentario"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comentario"> | Date | string
  }

  export type MensalidadeWhereInput = {
    AND?: MensalidadeWhereInput | MensalidadeWhereInput[]
    OR?: MensalidadeWhereInput[]
    NOT?: MensalidadeWhereInput | MensalidadeWhereInput[]
    id?: StringFilter<"Mensalidade"> | string
    valor?: FloatFilter<"Mensalidade"> | number
    descricao?: StringNullableFilter<"Mensalidade"> | string | null
    vencimento?: DateTimeFilter<"Mensalidade"> | Date | string
    membroId?: StringFilter<"Mensalidade"> | string
    createdAt?: DateTimeFilter<"Mensalidade"> | Date | string
    updatedAt?: DateTimeFilter<"Mensalidade"> | Date | string
    membro?: XOR<MemberRelationFilter, MemberWhereInput>
  }

  export type MensalidadeOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    descricao?: SortOrderInput | SortOrder
    vencimento?: SortOrder
    membroId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    membro?: MemberOrderByWithRelationInput
  }

  export type MensalidadeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MensalidadeWhereInput | MensalidadeWhereInput[]
    OR?: MensalidadeWhereInput[]
    NOT?: MensalidadeWhereInput | MensalidadeWhereInput[]
    valor?: FloatFilter<"Mensalidade"> | number
    descricao?: StringNullableFilter<"Mensalidade"> | string | null
    vencimento?: DateTimeFilter<"Mensalidade"> | Date | string
    membroId?: StringFilter<"Mensalidade"> | string
    createdAt?: DateTimeFilter<"Mensalidade"> | Date | string
    updatedAt?: DateTimeFilter<"Mensalidade"> | Date | string
    membro?: XOR<MemberRelationFilter, MemberWhereInput>
  }, "id">

  export type MensalidadeOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    descricao?: SortOrderInput | SortOrder
    vencimento?: SortOrder
    membroId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MensalidadeCountOrderByAggregateInput
    _avg?: MensalidadeAvgOrderByAggregateInput
    _max?: MensalidadeMaxOrderByAggregateInput
    _min?: MensalidadeMinOrderByAggregateInput
    _sum?: MensalidadeSumOrderByAggregateInput
  }

  export type MensalidadeScalarWhereWithAggregatesInput = {
    AND?: MensalidadeScalarWhereWithAggregatesInput | MensalidadeScalarWhereWithAggregatesInput[]
    OR?: MensalidadeScalarWhereWithAggregatesInput[]
    NOT?: MensalidadeScalarWhereWithAggregatesInput | MensalidadeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Mensalidade"> | string
    valor?: FloatWithAggregatesFilter<"Mensalidade"> | number
    descricao?: StringNullableWithAggregatesFilter<"Mensalidade"> | string | null
    vencimento?: DateTimeWithAggregatesFilter<"Mensalidade"> | Date | string
    membroId?: StringWithAggregatesFilter<"Mensalidade"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Mensalidade"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Mensalidade"> | Date | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    title?: StringFilter<"Post"> | string
    descricao?: StringFilter<"Post"> | string
    imagem?: StringNullableFilter<"Post"> | string | null
    grupoId?: StringFilter<"Post"> | string
    autorId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
    autor?: XOR<MemberRelationFilter, MemberWhereInput>
    comentarios?: ComentarioListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    imagem?: SortOrderInput | SortOrder
    grupoId?: SortOrder
    autorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grupo?: GroupOrderByWithRelationInput
    autor?: MemberOrderByWithRelationInput
    comentarios?: ComentarioOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    title?: StringFilter<"Post"> | string
    descricao?: StringFilter<"Post"> | string
    imagem?: StringNullableFilter<"Post"> | string | null
    grupoId?: StringFilter<"Post"> | string
    autorId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    grupo?: XOR<GroupRelationFilter, GroupWhereInput>
    autor?: XOR<MemberRelationFilter, MemberWhereInput>
    comentarios?: ComentarioListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    imagem?: SortOrderInput | SortOrder
    grupoId?: SortOrder
    autorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    title?: StringWithAggregatesFilter<"Post"> | string
    descricao?: StringWithAggregatesFilter<"Post"> | string
    imagem?: StringNullableWithAggregatesFilter<"Post"> | string | null
    grupoId?: StringWithAggregatesFilter<"Post"> | string
    autorId?: StringWithAggregatesFilter<"Post"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
  }

  export type GroupCreateInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberCreateNestedManyWithoutGrupoInput
    musicas?: MusicaCreateNestedManyWithoutGrupoInput
    kits?: KitCreateNestedManyWithoutGrupoInput
    agendas?: AgendaCreateNestedManyWithoutGrupoInput
    posts?: PostCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioCreateNestedManyWithoutGrupoInput
  }

  export type GroupUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberUncheckedCreateNestedManyWithoutGrupoInput
    musicas?: MusicaUncheckedCreateNestedManyWithoutGrupoInput
    kits?: KitUncheckedCreateNestedManyWithoutGrupoInput
    agendas?: AgendaUncheckedCreateNestedManyWithoutGrupoInput
    posts?: PostUncheckedCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUpdateManyWithoutGrupoNestedInput
    kits?: KitUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUpdateManyWithoutGrupoNestedInput
    posts?: PostUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUpdateManyWithoutGrupoNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUncheckedUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUncheckedUpdateManyWithoutGrupoNestedInput
    kits?: KitUncheckedUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUncheckedUpdateManyWithoutGrupoNestedInput
    posts?: PostUncheckedUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type GroupCreateManyInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberCreateInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutMembrosInput
    posts?: PostCreateNestedManyWithoutAutorInput
    comentarios?: ComentarioCreateNestedManyWithoutAutorInput
    mensalidades?: MensalidadeCreateNestedManyWithoutMembroInput
  }

  export type MemberUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAutorInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutAutorInput
    mensalidades?: MensalidadeUncheckedCreateNestedManyWithoutMembroInput
  }

  export type MemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutMembrosNestedInput
    posts?: PostUpdateManyWithoutAutorNestedInput
    comentarios?: ComentarioUpdateManyWithoutAutorNestedInput
    mensalidades?: MensalidadeUpdateManyWithoutMembroNestedInput
  }

  export type MemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAutorNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutAutorNestedInput
    mensalidades?: MensalidadeUncheckedUpdateManyWithoutMembroNestedInput
  }

  export type MemberCreateManyInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MusicaCreateInput = {
    id?: string
    title: string
    musicUrl: string
    capaUrl: string
    letra?: string | null
    artista?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutMusicasInput
  }

  export type MusicaUncheckedCreateInput = {
    id?: string
    title: string
    musicUrl: string
    capaUrl: string
    letra?: string | null
    artista?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MusicaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    musicUrl?: StringFieldUpdateOperationsInput | string
    capaUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutMusicasNestedInput
  }

  export type MusicaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    musicUrl?: StringFieldUpdateOperationsInput | string
    capaUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MusicaCreateManyInput = {
    id?: string
    title: string
    musicUrl: string
    capaUrl: string
    letra?: string | null
    artista?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MusicaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    musicUrl?: StringFieldUpdateOperationsInput | string
    capaUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MusicaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    musicUrl?: StringFieldUpdateOperationsInput | string
    capaUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitCreateInput = {
    id?: string
    title: string
    nipe: string
    cantado?: string | null
    kitUrl: string
    letra?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutKitsInput
  }

  export type KitUncheckedCreateInput = {
    id?: string
    title: string
    nipe: string
    cantado?: string | null
    kitUrl: string
    letra?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    nipe?: StringFieldUpdateOperationsInput | string
    cantado?: NullableStringFieldUpdateOperationsInput | string | null
    kitUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutKitsNestedInput
  }

  export type KitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    nipe?: StringFieldUpdateOperationsInput | string
    cantado?: NullableStringFieldUpdateOperationsInput | string | null
    kitUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitCreateManyInput = {
    id?: string
    title: string
    nipe: string
    cantado?: string | null
    kitUrl: string
    letra?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    nipe?: StringFieldUpdateOperationsInput | string
    cantado?: NullableStringFieldUpdateOperationsInput | string | null
    kitUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    nipe?: StringFieldUpdateOperationsInput | string
    cantado?: NullableStringFieldUpdateOperationsInput | string | null
    kitUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaCreateInput = {
    id?: string
    title: string
    descricao: string
    endereco?: string | null
    data?: Date | string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutAgendasInput
  }

  export type AgendaUncheckedCreateInput = {
    id?: string
    title: string
    descricao: string
    endereco?: string | null
    data?: Date | string | null
    status: string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutAgendasNestedInput
  }

  export type AgendaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaCreateManyInput = {
    id?: string
    title: string
    descricao: string
    endereco?: string | null
    data?: Date | string | null
    status: string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioCreateInput = {
    id?: string
    descricao: string
    createdAt?: Date | string
    updatedAt?: Date | string
    autor?: MemberCreateNestedOneWithoutComentariosInput
    grupo?: GroupCreateNestedOneWithoutComentariosInput
    post?: PostCreateNestedOneWithoutComentariosInput
  }

  export type ComentarioUncheckedCreateInput = {
    id?: string
    descricao: string
    autorId?: string | null
    grupoId?: string | null
    postId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComentarioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: MemberUpdateOneWithoutComentariosNestedInput
    grupo?: GroupUpdateOneWithoutComentariosNestedInput
    post?: PostUpdateOneWithoutComentariosNestedInput
  }

  export type ComentarioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    autorId?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioCreateManyInput = {
    id?: string
    descricao: string
    autorId?: string | null
    grupoId?: string | null
    postId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComentarioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    autorId?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensalidadeCreateInput = {
    id?: string
    valor: number
    descricao?: string | null
    vencimento: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    membro: MemberCreateNestedOneWithoutMensalidadesInput
  }

  export type MensalidadeUncheckedCreateInput = {
    id?: string
    valor: number
    descricao?: string | null
    vencimento: Date | string
    membroId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MensalidadeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membro?: MemberUpdateOneRequiredWithoutMensalidadesNestedInput
  }

  export type MensalidadeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    membroId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensalidadeCreateManyInput = {
    id?: string
    valor: number
    descricao?: string | null
    vencimento: Date | string
    membroId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MensalidadeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensalidadeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    membroId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutPostsInput
    autor: MemberCreateNestedOneWithoutPostsInput
    comentarios?: ComentarioCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    grupoId: string
    autorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutPostsNestedInput
    autor?: MemberUpdateOneRequiredWithoutPostsNestedInput
    comentarios?: ComentarioUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    autorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comentarios?: ComentarioUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    grupoId: string
    autorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    autorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MemberListRelationFilter = {
    every?: MemberWhereInput
    some?: MemberWhereInput
    none?: MemberWhereInput
  }

  export type MusicaListRelationFilter = {
    every?: MusicaWhereInput
    some?: MusicaWhereInput
    none?: MusicaWhereInput
  }

  export type KitListRelationFilter = {
    every?: KitWhereInput
    some?: KitWhereInput
    none?: KitWhereInput
  }

  export type AgendaListRelationFilter = {
    every?: AgendaWhereInput
    some?: AgendaWhereInput
    none?: AgendaWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type ComentarioListRelationFilter = {
    every?: ComentarioWhereInput
    some?: ComentarioWhereInput
    none?: ComentarioWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MusicaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgendaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComentarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    senha?: SortOrder
    isAdmin?: SortOrder
    ImgPerfil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    senha?: SortOrder
    isAdmin?: SortOrder
    ImgPerfil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    senha?: SortOrder
    isAdmin?: SortOrder
    ImgPerfil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type GroupRelationFilter = {
    is?: GroupWhereInput
    isNot?: GroupWhereInput
  }

  export type MensalidadeListRelationFilter = {
    every?: MensalidadeWhereInput
    some?: MensalidadeWhereInput
    none?: MensalidadeWhereInput
  }

  export type MensalidadeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    senha?: SortOrder
    imgPerfil?: SortOrder
    nascimento?: SortOrder
    nipe?: SortOrder
    cargo?: SortOrder
    isAdmin?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemberMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    senha?: SortOrder
    imgPerfil?: SortOrder
    nascimento?: SortOrder
    nipe?: SortOrder
    cargo?: SortOrder
    isAdmin?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemberMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    senha?: SortOrder
    imgPerfil?: SortOrder
    nascimento?: SortOrder
    nipe?: SortOrder
    cargo?: SortOrder
    isAdmin?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MusicaCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    musicUrl?: SortOrder
    capaUrl?: SortOrder
    letra?: SortOrder
    artista?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MusicaMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    musicUrl?: SortOrder
    capaUrl?: SortOrder
    letra?: SortOrder
    artista?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MusicaMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    musicUrl?: SortOrder
    capaUrl?: SortOrder
    letra?: SortOrder
    artista?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KitCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    nipe?: SortOrder
    cantado?: SortOrder
    kitUrl?: SortOrder
    letra?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KitMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    nipe?: SortOrder
    cantado?: SortOrder
    kitUrl?: SortOrder
    letra?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KitMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    nipe?: SortOrder
    cantado?: SortOrder
    kitUrl?: SortOrder
    letra?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AgendaCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    data?: SortOrder
    status?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgendaMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    data?: SortOrder
    status?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgendaMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    endereco?: SortOrder
    data?: SortOrder
    status?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MemberNullableRelationFilter = {
    is?: MemberWhereInput | null
    isNot?: MemberWhereInput | null
  }

  export type GroupNullableRelationFilter = {
    is?: GroupWhereInput | null
    isNot?: GroupWhereInput | null
  }

  export type PostNullableRelationFilter = {
    is?: PostWhereInput | null
    isNot?: PostWhereInput | null
  }

  export type ComentarioCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    autorId?: SortOrder
    grupoId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComentarioMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    autorId?: SortOrder
    grupoId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComentarioMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    autorId?: SortOrder
    grupoId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MemberRelationFilter = {
    is?: MemberWhereInput
    isNot?: MemberWhereInput
  }

  export type MensalidadeCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
    vencimento?: SortOrder
    membroId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MensalidadeAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type MensalidadeMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
    vencimento?: SortOrder
    membroId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MensalidadeMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
    vencimento?: SortOrder
    membroId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MensalidadeSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    imagem?: SortOrder
    grupoId?: SortOrder
    autorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    imagem?: SortOrder
    grupoId?: SortOrder
    autorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    descricao?: SortOrder
    imagem?: SortOrder
    grupoId?: SortOrder
    autorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemberCreateNestedManyWithoutGrupoInput = {
    create?: XOR<MemberCreateWithoutGrupoInput, MemberUncheckedCreateWithoutGrupoInput> | MemberCreateWithoutGrupoInput[] | MemberUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutGrupoInput | MemberCreateOrConnectWithoutGrupoInput[]
    createMany?: MemberCreateManyGrupoInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type MusicaCreateNestedManyWithoutGrupoInput = {
    create?: XOR<MusicaCreateWithoutGrupoInput, MusicaUncheckedCreateWithoutGrupoInput> | MusicaCreateWithoutGrupoInput[] | MusicaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: MusicaCreateOrConnectWithoutGrupoInput | MusicaCreateOrConnectWithoutGrupoInput[]
    createMany?: MusicaCreateManyGrupoInputEnvelope
    connect?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
  }

  export type KitCreateNestedManyWithoutGrupoInput = {
    create?: XOR<KitCreateWithoutGrupoInput, KitUncheckedCreateWithoutGrupoInput> | KitCreateWithoutGrupoInput[] | KitUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: KitCreateOrConnectWithoutGrupoInput | KitCreateOrConnectWithoutGrupoInput[]
    createMany?: KitCreateManyGrupoInputEnvelope
    connect?: KitWhereUniqueInput | KitWhereUniqueInput[]
  }

  export type AgendaCreateNestedManyWithoutGrupoInput = {
    create?: XOR<AgendaCreateWithoutGrupoInput, AgendaUncheckedCreateWithoutGrupoInput> | AgendaCreateWithoutGrupoInput[] | AgendaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: AgendaCreateOrConnectWithoutGrupoInput | AgendaCreateOrConnectWithoutGrupoInput[]
    createMany?: AgendaCreateManyGrupoInputEnvelope
    connect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutGrupoInput = {
    create?: XOR<PostCreateWithoutGrupoInput, PostUncheckedCreateWithoutGrupoInput> | PostCreateWithoutGrupoInput[] | PostUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PostCreateOrConnectWithoutGrupoInput | PostCreateOrConnectWithoutGrupoInput[]
    createMany?: PostCreateManyGrupoInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ComentarioCreateNestedManyWithoutGrupoInput = {
    create?: XOR<ComentarioCreateWithoutGrupoInput, ComentarioUncheckedCreateWithoutGrupoInput> | ComentarioCreateWithoutGrupoInput[] | ComentarioUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutGrupoInput | ComentarioCreateOrConnectWithoutGrupoInput[]
    createMany?: ComentarioCreateManyGrupoInputEnvelope
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
  }

  export type MemberUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<MemberCreateWithoutGrupoInput, MemberUncheckedCreateWithoutGrupoInput> | MemberCreateWithoutGrupoInput[] | MemberUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutGrupoInput | MemberCreateOrConnectWithoutGrupoInput[]
    createMany?: MemberCreateManyGrupoInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type MusicaUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<MusicaCreateWithoutGrupoInput, MusicaUncheckedCreateWithoutGrupoInput> | MusicaCreateWithoutGrupoInput[] | MusicaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: MusicaCreateOrConnectWithoutGrupoInput | MusicaCreateOrConnectWithoutGrupoInput[]
    createMany?: MusicaCreateManyGrupoInputEnvelope
    connect?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
  }

  export type KitUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<KitCreateWithoutGrupoInput, KitUncheckedCreateWithoutGrupoInput> | KitCreateWithoutGrupoInput[] | KitUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: KitCreateOrConnectWithoutGrupoInput | KitCreateOrConnectWithoutGrupoInput[]
    createMany?: KitCreateManyGrupoInputEnvelope
    connect?: KitWhereUniqueInput | KitWhereUniqueInput[]
  }

  export type AgendaUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<AgendaCreateWithoutGrupoInput, AgendaUncheckedCreateWithoutGrupoInput> | AgendaCreateWithoutGrupoInput[] | AgendaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: AgendaCreateOrConnectWithoutGrupoInput | AgendaCreateOrConnectWithoutGrupoInput[]
    createMany?: AgendaCreateManyGrupoInputEnvelope
    connect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<PostCreateWithoutGrupoInput, PostUncheckedCreateWithoutGrupoInput> | PostCreateWithoutGrupoInput[] | PostUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PostCreateOrConnectWithoutGrupoInput | PostCreateOrConnectWithoutGrupoInput[]
    createMany?: PostCreateManyGrupoInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ComentarioUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<ComentarioCreateWithoutGrupoInput, ComentarioUncheckedCreateWithoutGrupoInput> | ComentarioCreateWithoutGrupoInput[] | ComentarioUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutGrupoInput | ComentarioCreateOrConnectWithoutGrupoInput[]
    createMany?: ComentarioCreateManyGrupoInputEnvelope
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MemberUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<MemberCreateWithoutGrupoInput, MemberUncheckedCreateWithoutGrupoInput> | MemberCreateWithoutGrupoInput[] | MemberUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutGrupoInput | MemberCreateOrConnectWithoutGrupoInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutGrupoInput | MemberUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: MemberCreateManyGrupoInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutGrupoInput | MemberUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutGrupoInput | MemberUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type MusicaUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<MusicaCreateWithoutGrupoInput, MusicaUncheckedCreateWithoutGrupoInput> | MusicaCreateWithoutGrupoInput[] | MusicaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: MusicaCreateOrConnectWithoutGrupoInput | MusicaCreateOrConnectWithoutGrupoInput[]
    upsert?: MusicaUpsertWithWhereUniqueWithoutGrupoInput | MusicaUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: MusicaCreateManyGrupoInputEnvelope
    set?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
    disconnect?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
    delete?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
    connect?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
    update?: MusicaUpdateWithWhereUniqueWithoutGrupoInput | MusicaUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: MusicaUpdateManyWithWhereWithoutGrupoInput | MusicaUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: MusicaScalarWhereInput | MusicaScalarWhereInput[]
  }

  export type KitUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<KitCreateWithoutGrupoInput, KitUncheckedCreateWithoutGrupoInput> | KitCreateWithoutGrupoInput[] | KitUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: KitCreateOrConnectWithoutGrupoInput | KitCreateOrConnectWithoutGrupoInput[]
    upsert?: KitUpsertWithWhereUniqueWithoutGrupoInput | KitUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: KitCreateManyGrupoInputEnvelope
    set?: KitWhereUniqueInput | KitWhereUniqueInput[]
    disconnect?: KitWhereUniqueInput | KitWhereUniqueInput[]
    delete?: KitWhereUniqueInput | KitWhereUniqueInput[]
    connect?: KitWhereUniqueInput | KitWhereUniqueInput[]
    update?: KitUpdateWithWhereUniqueWithoutGrupoInput | KitUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: KitUpdateManyWithWhereWithoutGrupoInput | KitUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: KitScalarWhereInput | KitScalarWhereInput[]
  }

  export type AgendaUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<AgendaCreateWithoutGrupoInput, AgendaUncheckedCreateWithoutGrupoInput> | AgendaCreateWithoutGrupoInput[] | AgendaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: AgendaCreateOrConnectWithoutGrupoInput | AgendaCreateOrConnectWithoutGrupoInput[]
    upsert?: AgendaUpsertWithWhereUniqueWithoutGrupoInput | AgendaUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: AgendaCreateManyGrupoInputEnvelope
    set?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    disconnect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    delete?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    connect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    update?: AgendaUpdateWithWhereUniqueWithoutGrupoInput | AgendaUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: AgendaUpdateManyWithWhereWithoutGrupoInput | AgendaUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: AgendaScalarWhereInput | AgendaScalarWhereInput[]
  }

  export type PostUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<PostCreateWithoutGrupoInput, PostUncheckedCreateWithoutGrupoInput> | PostCreateWithoutGrupoInput[] | PostUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PostCreateOrConnectWithoutGrupoInput | PostCreateOrConnectWithoutGrupoInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutGrupoInput | PostUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: PostCreateManyGrupoInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutGrupoInput | PostUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: PostUpdateManyWithWhereWithoutGrupoInput | PostUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ComentarioUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<ComentarioCreateWithoutGrupoInput, ComentarioUncheckedCreateWithoutGrupoInput> | ComentarioCreateWithoutGrupoInput[] | ComentarioUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutGrupoInput | ComentarioCreateOrConnectWithoutGrupoInput[]
    upsert?: ComentarioUpsertWithWhereUniqueWithoutGrupoInput | ComentarioUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: ComentarioCreateManyGrupoInputEnvelope
    set?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    disconnect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    delete?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    update?: ComentarioUpdateWithWhereUniqueWithoutGrupoInput | ComentarioUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: ComentarioUpdateManyWithWhereWithoutGrupoInput | ComentarioUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: ComentarioScalarWhereInput | ComentarioScalarWhereInput[]
  }

  export type MemberUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<MemberCreateWithoutGrupoInput, MemberUncheckedCreateWithoutGrupoInput> | MemberCreateWithoutGrupoInput[] | MemberUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutGrupoInput | MemberCreateOrConnectWithoutGrupoInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutGrupoInput | MemberUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: MemberCreateManyGrupoInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutGrupoInput | MemberUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutGrupoInput | MemberUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type MusicaUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<MusicaCreateWithoutGrupoInput, MusicaUncheckedCreateWithoutGrupoInput> | MusicaCreateWithoutGrupoInput[] | MusicaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: MusicaCreateOrConnectWithoutGrupoInput | MusicaCreateOrConnectWithoutGrupoInput[]
    upsert?: MusicaUpsertWithWhereUniqueWithoutGrupoInput | MusicaUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: MusicaCreateManyGrupoInputEnvelope
    set?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
    disconnect?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
    delete?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
    connect?: MusicaWhereUniqueInput | MusicaWhereUniqueInput[]
    update?: MusicaUpdateWithWhereUniqueWithoutGrupoInput | MusicaUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: MusicaUpdateManyWithWhereWithoutGrupoInput | MusicaUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: MusicaScalarWhereInput | MusicaScalarWhereInput[]
  }

  export type KitUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<KitCreateWithoutGrupoInput, KitUncheckedCreateWithoutGrupoInput> | KitCreateWithoutGrupoInput[] | KitUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: KitCreateOrConnectWithoutGrupoInput | KitCreateOrConnectWithoutGrupoInput[]
    upsert?: KitUpsertWithWhereUniqueWithoutGrupoInput | KitUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: KitCreateManyGrupoInputEnvelope
    set?: KitWhereUniqueInput | KitWhereUniqueInput[]
    disconnect?: KitWhereUniqueInput | KitWhereUniqueInput[]
    delete?: KitWhereUniqueInput | KitWhereUniqueInput[]
    connect?: KitWhereUniqueInput | KitWhereUniqueInput[]
    update?: KitUpdateWithWhereUniqueWithoutGrupoInput | KitUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: KitUpdateManyWithWhereWithoutGrupoInput | KitUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: KitScalarWhereInput | KitScalarWhereInput[]
  }

  export type AgendaUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<AgendaCreateWithoutGrupoInput, AgendaUncheckedCreateWithoutGrupoInput> | AgendaCreateWithoutGrupoInput[] | AgendaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: AgendaCreateOrConnectWithoutGrupoInput | AgendaCreateOrConnectWithoutGrupoInput[]
    upsert?: AgendaUpsertWithWhereUniqueWithoutGrupoInput | AgendaUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: AgendaCreateManyGrupoInputEnvelope
    set?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    disconnect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    delete?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    connect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    update?: AgendaUpdateWithWhereUniqueWithoutGrupoInput | AgendaUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: AgendaUpdateManyWithWhereWithoutGrupoInput | AgendaUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: AgendaScalarWhereInput | AgendaScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<PostCreateWithoutGrupoInput, PostUncheckedCreateWithoutGrupoInput> | PostCreateWithoutGrupoInput[] | PostUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PostCreateOrConnectWithoutGrupoInput | PostCreateOrConnectWithoutGrupoInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutGrupoInput | PostUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: PostCreateManyGrupoInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutGrupoInput | PostUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: PostUpdateManyWithWhereWithoutGrupoInput | PostUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ComentarioUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<ComentarioCreateWithoutGrupoInput, ComentarioUncheckedCreateWithoutGrupoInput> | ComentarioCreateWithoutGrupoInput[] | ComentarioUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutGrupoInput | ComentarioCreateOrConnectWithoutGrupoInput[]
    upsert?: ComentarioUpsertWithWhereUniqueWithoutGrupoInput | ComentarioUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: ComentarioCreateManyGrupoInputEnvelope
    set?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    disconnect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    delete?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    update?: ComentarioUpdateWithWhereUniqueWithoutGrupoInput | ComentarioUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: ComentarioUpdateManyWithWhereWithoutGrupoInput | ComentarioUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: ComentarioScalarWhereInput | ComentarioScalarWhereInput[]
  }

  export type GroupCreateNestedOneWithoutMembrosInput = {
    create?: XOR<GroupCreateWithoutMembrosInput, GroupUncheckedCreateWithoutMembrosInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMembrosInput
    connect?: GroupWhereUniqueInput
  }

  export type PostCreateNestedManyWithoutAutorInput = {
    create?: XOR<PostCreateWithoutAutorInput, PostUncheckedCreateWithoutAutorInput> | PostCreateWithoutAutorInput[] | PostUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAutorInput | PostCreateOrConnectWithoutAutorInput[]
    createMany?: PostCreateManyAutorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ComentarioCreateNestedManyWithoutAutorInput = {
    create?: XOR<ComentarioCreateWithoutAutorInput, ComentarioUncheckedCreateWithoutAutorInput> | ComentarioCreateWithoutAutorInput[] | ComentarioUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutAutorInput | ComentarioCreateOrConnectWithoutAutorInput[]
    createMany?: ComentarioCreateManyAutorInputEnvelope
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
  }

  export type MensalidadeCreateNestedManyWithoutMembroInput = {
    create?: XOR<MensalidadeCreateWithoutMembroInput, MensalidadeUncheckedCreateWithoutMembroInput> | MensalidadeCreateWithoutMembroInput[] | MensalidadeUncheckedCreateWithoutMembroInput[]
    connectOrCreate?: MensalidadeCreateOrConnectWithoutMembroInput | MensalidadeCreateOrConnectWithoutMembroInput[]
    createMany?: MensalidadeCreateManyMembroInputEnvelope
    connect?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutAutorInput = {
    create?: XOR<PostCreateWithoutAutorInput, PostUncheckedCreateWithoutAutorInput> | PostCreateWithoutAutorInput[] | PostUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAutorInput | PostCreateOrConnectWithoutAutorInput[]
    createMany?: PostCreateManyAutorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ComentarioUncheckedCreateNestedManyWithoutAutorInput = {
    create?: XOR<ComentarioCreateWithoutAutorInput, ComentarioUncheckedCreateWithoutAutorInput> | ComentarioCreateWithoutAutorInput[] | ComentarioUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutAutorInput | ComentarioCreateOrConnectWithoutAutorInput[]
    createMany?: ComentarioCreateManyAutorInputEnvelope
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
  }

  export type MensalidadeUncheckedCreateNestedManyWithoutMembroInput = {
    create?: XOR<MensalidadeCreateWithoutMembroInput, MensalidadeUncheckedCreateWithoutMembroInput> | MensalidadeCreateWithoutMembroInput[] | MensalidadeUncheckedCreateWithoutMembroInput[]
    connectOrCreate?: MensalidadeCreateOrConnectWithoutMembroInput | MensalidadeCreateOrConnectWithoutMembroInput[]
    createMany?: MensalidadeCreateManyMembroInputEnvelope
    connect?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
  }

  export type GroupUpdateOneRequiredWithoutMembrosNestedInput = {
    create?: XOR<GroupCreateWithoutMembrosInput, GroupUncheckedCreateWithoutMembrosInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMembrosInput
    upsert?: GroupUpsertWithoutMembrosInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutMembrosInput, GroupUpdateWithoutMembrosInput>, GroupUncheckedUpdateWithoutMembrosInput>
  }

  export type PostUpdateManyWithoutAutorNestedInput = {
    create?: XOR<PostCreateWithoutAutorInput, PostUncheckedCreateWithoutAutorInput> | PostCreateWithoutAutorInput[] | PostUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAutorInput | PostCreateOrConnectWithoutAutorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAutorInput | PostUpsertWithWhereUniqueWithoutAutorInput[]
    createMany?: PostCreateManyAutorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAutorInput | PostUpdateWithWhereUniqueWithoutAutorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAutorInput | PostUpdateManyWithWhereWithoutAutorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ComentarioUpdateManyWithoutAutorNestedInput = {
    create?: XOR<ComentarioCreateWithoutAutorInput, ComentarioUncheckedCreateWithoutAutorInput> | ComentarioCreateWithoutAutorInput[] | ComentarioUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutAutorInput | ComentarioCreateOrConnectWithoutAutorInput[]
    upsert?: ComentarioUpsertWithWhereUniqueWithoutAutorInput | ComentarioUpsertWithWhereUniqueWithoutAutorInput[]
    createMany?: ComentarioCreateManyAutorInputEnvelope
    set?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    disconnect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    delete?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    update?: ComentarioUpdateWithWhereUniqueWithoutAutorInput | ComentarioUpdateWithWhereUniqueWithoutAutorInput[]
    updateMany?: ComentarioUpdateManyWithWhereWithoutAutorInput | ComentarioUpdateManyWithWhereWithoutAutorInput[]
    deleteMany?: ComentarioScalarWhereInput | ComentarioScalarWhereInput[]
  }

  export type MensalidadeUpdateManyWithoutMembroNestedInput = {
    create?: XOR<MensalidadeCreateWithoutMembroInput, MensalidadeUncheckedCreateWithoutMembroInput> | MensalidadeCreateWithoutMembroInput[] | MensalidadeUncheckedCreateWithoutMembroInput[]
    connectOrCreate?: MensalidadeCreateOrConnectWithoutMembroInput | MensalidadeCreateOrConnectWithoutMembroInput[]
    upsert?: MensalidadeUpsertWithWhereUniqueWithoutMembroInput | MensalidadeUpsertWithWhereUniqueWithoutMembroInput[]
    createMany?: MensalidadeCreateManyMembroInputEnvelope
    set?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
    disconnect?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
    delete?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
    connect?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
    update?: MensalidadeUpdateWithWhereUniqueWithoutMembroInput | MensalidadeUpdateWithWhereUniqueWithoutMembroInput[]
    updateMany?: MensalidadeUpdateManyWithWhereWithoutMembroInput | MensalidadeUpdateManyWithWhereWithoutMembroInput[]
    deleteMany?: MensalidadeScalarWhereInput | MensalidadeScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutAutorNestedInput = {
    create?: XOR<PostCreateWithoutAutorInput, PostUncheckedCreateWithoutAutorInput> | PostCreateWithoutAutorInput[] | PostUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAutorInput | PostCreateOrConnectWithoutAutorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAutorInput | PostUpsertWithWhereUniqueWithoutAutorInput[]
    createMany?: PostCreateManyAutorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAutorInput | PostUpdateWithWhereUniqueWithoutAutorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAutorInput | PostUpdateManyWithWhereWithoutAutorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ComentarioUncheckedUpdateManyWithoutAutorNestedInput = {
    create?: XOR<ComentarioCreateWithoutAutorInput, ComentarioUncheckedCreateWithoutAutorInput> | ComentarioCreateWithoutAutorInput[] | ComentarioUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutAutorInput | ComentarioCreateOrConnectWithoutAutorInput[]
    upsert?: ComentarioUpsertWithWhereUniqueWithoutAutorInput | ComentarioUpsertWithWhereUniqueWithoutAutorInput[]
    createMany?: ComentarioCreateManyAutorInputEnvelope
    set?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    disconnect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    delete?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    update?: ComentarioUpdateWithWhereUniqueWithoutAutorInput | ComentarioUpdateWithWhereUniqueWithoutAutorInput[]
    updateMany?: ComentarioUpdateManyWithWhereWithoutAutorInput | ComentarioUpdateManyWithWhereWithoutAutorInput[]
    deleteMany?: ComentarioScalarWhereInput | ComentarioScalarWhereInput[]
  }

  export type MensalidadeUncheckedUpdateManyWithoutMembroNestedInput = {
    create?: XOR<MensalidadeCreateWithoutMembroInput, MensalidadeUncheckedCreateWithoutMembroInput> | MensalidadeCreateWithoutMembroInput[] | MensalidadeUncheckedCreateWithoutMembroInput[]
    connectOrCreate?: MensalidadeCreateOrConnectWithoutMembroInput | MensalidadeCreateOrConnectWithoutMembroInput[]
    upsert?: MensalidadeUpsertWithWhereUniqueWithoutMembroInput | MensalidadeUpsertWithWhereUniqueWithoutMembroInput[]
    createMany?: MensalidadeCreateManyMembroInputEnvelope
    set?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
    disconnect?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
    delete?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
    connect?: MensalidadeWhereUniqueInput | MensalidadeWhereUniqueInput[]
    update?: MensalidadeUpdateWithWhereUniqueWithoutMembroInput | MensalidadeUpdateWithWhereUniqueWithoutMembroInput[]
    updateMany?: MensalidadeUpdateManyWithWhereWithoutMembroInput | MensalidadeUpdateManyWithWhereWithoutMembroInput[]
    deleteMany?: MensalidadeScalarWhereInput | MensalidadeScalarWhereInput[]
  }

  export type GroupCreateNestedOneWithoutMusicasInput = {
    create?: XOR<GroupCreateWithoutMusicasInput, GroupUncheckedCreateWithoutMusicasInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMusicasInput
    connect?: GroupWhereUniqueInput
  }

  export type GroupUpdateOneRequiredWithoutMusicasNestedInput = {
    create?: XOR<GroupCreateWithoutMusicasInput, GroupUncheckedCreateWithoutMusicasInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMusicasInput
    upsert?: GroupUpsertWithoutMusicasInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutMusicasInput, GroupUpdateWithoutMusicasInput>, GroupUncheckedUpdateWithoutMusicasInput>
  }

  export type GroupCreateNestedOneWithoutKitsInput = {
    create?: XOR<GroupCreateWithoutKitsInput, GroupUncheckedCreateWithoutKitsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutKitsInput
    connect?: GroupWhereUniqueInput
  }

  export type GroupUpdateOneRequiredWithoutKitsNestedInput = {
    create?: XOR<GroupCreateWithoutKitsInput, GroupUncheckedCreateWithoutKitsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutKitsInput
    upsert?: GroupUpsertWithoutKitsInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutKitsInput, GroupUpdateWithoutKitsInput>, GroupUncheckedUpdateWithoutKitsInput>
  }

  export type GroupCreateNestedOneWithoutAgendasInput = {
    create?: XOR<GroupCreateWithoutAgendasInput, GroupUncheckedCreateWithoutAgendasInput>
    connectOrCreate?: GroupCreateOrConnectWithoutAgendasInput
    connect?: GroupWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type GroupUpdateOneRequiredWithoutAgendasNestedInput = {
    create?: XOR<GroupCreateWithoutAgendasInput, GroupUncheckedCreateWithoutAgendasInput>
    connectOrCreate?: GroupCreateOrConnectWithoutAgendasInput
    upsert?: GroupUpsertWithoutAgendasInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutAgendasInput, GroupUpdateWithoutAgendasInput>, GroupUncheckedUpdateWithoutAgendasInput>
  }

  export type MemberCreateNestedOneWithoutComentariosInput = {
    create?: XOR<MemberCreateWithoutComentariosInput, MemberUncheckedCreateWithoutComentariosInput>
    connectOrCreate?: MemberCreateOrConnectWithoutComentariosInput
    connect?: MemberWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutComentariosInput = {
    create?: XOR<GroupCreateWithoutComentariosInput, GroupUncheckedCreateWithoutComentariosInput>
    connectOrCreate?: GroupCreateOrConnectWithoutComentariosInput
    connect?: GroupWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutComentariosInput = {
    create?: XOR<PostCreateWithoutComentariosInput, PostUncheckedCreateWithoutComentariosInput>
    connectOrCreate?: PostCreateOrConnectWithoutComentariosInput
    connect?: PostWhereUniqueInput
  }

  export type MemberUpdateOneWithoutComentariosNestedInput = {
    create?: XOR<MemberCreateWithoutComentariosInput, MemberUncheckedCreateWithoutComentariosInput>
    connectOrCreate?: MemberCreateOrConnectWithoutComentariosInput
    upsert?: MemberUpsertWithoutComentariosInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutComentariosInput, MemberUpdateWithoutComentariosInput>, MemberUncheckedUpdateWithoutComentariosInput>
  }

  export type GroupUpdateOneWithoutComentariosNestedInput = {
    create?: XOR<GroupCreateWithoutComentariosInput, GroupUncheckedCreateWithoutComentariosInput>
    connectOrCreate?: GroupCreateOrConnectWithoutComentariosInput
    upsert?: GroupUpsertWithoutComentariosInput
    disconnect?: GroupWhereInput | boolean
    delete?: GroupWhereInput | boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutComentariosInput, GroupUpdateWithoutComentariosInput>, GroupUncheckedUpdateWithoutComentariosInput>
  }

  export type PostUpdateOneWithoutComentariosNestedInput = {
    create?: XOR<PostCreateWithoutComentariosInput, PostUncheckedCreateWithoutComentariosInput>
    connectOrCreate?: PostCreateOrConnectWithoutComentariosInput
    upsert?: PostUpsertWithoutComentariosInput
    disconnect?: PostWhereInput | boolean
    delete?: PostWhereInput | boolean
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutComentariosInput, PostUpdateWithoutComentariosInput>, PostUncheckedUpdateWithoutComentariosInput>
  }

  export type MemberCreateNestedOneWithoutMensalidadesInput = {
    create?: XOR<MemberCreateWithoutMensalidadesInput, MemberUncheckedCreateWithoutMensalidadesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutMensalidadesInput
    connect?: MemberWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MemberUpdateOneRequiredWithoutMensalidadesNestedInput = {
    create?: XOR<MemberCreateWithoutMensalidadesInput, MemberUncheckedCreateWithoutMensalidadesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutMensalidadesInput
    upsert?: MemberUpsertWithoutMensalidadesInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutMensalidadesInput, MemberUpdateWithoutMensalidadesInput>, MemberUncheckedUpdateWithoutMensalidadesInput>
  }

  export type GroupCreateNestedOneWithoutPostsInput = {
    create?: XOR<GroupCreateWithoutPostsInput, GroupUncheckedCreateWithoutPostsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutPostsInput
    connect?: GroupWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutPostsInput = {
    create?: XOR<MemberCreateWithoutPostsInput, MemberUncheckedCreateWithoutPostsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPostsInput
    connect?: MemberWhereUniqueInput
  }

  export type ComentarioCreateNestedManyWithoutPostInput = {
    create?: XOR<ComentarioCreateWithoutPostInput, ComentarioUncheckedCreateWithoutPostInput> | ComentarioCreateWithoutPostInput[] | ComentarioUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutPostInput | ComentarioCreateOrConnectWithoutPostInput[]
    createMany?: ComentarioCreateManyPostInputEnvelope
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
  }

  export type ComentarioUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ComentarioCreateWithoutPostInput, ComentarioUncheckedCreateWithoutPostInput> | ComentarioCreateWithoutPostInput[] | ComentarioUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutPostInput | ComentarioCreateOrConnectWithoutPostInput[]
    createMany?: ComentarioCreateManyPostInputEnvelope
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
  }

  export type GroupUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<GroupCreateWithoutPostsInput, GroupUncheckedCreateWithoutPostsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutPostsInput
    upsert?: GroupUpsertWithoutPostsInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutPostsInput, GroupUpdateWithoutPostsInput>, GroupUncheckedUpdateWithoutPostsInput>
  }

  export type MemberUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<MemberCreateWithoutPostsInput, MemberUncheckedCreateWithoutPostsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPostsInput
    upsert?: MemberUpsertWithoutPostsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutPostsInput, MemberUpdateWithoutPostsInput>, MemberUncheckedUpdateWithoutPostsInput>
  }

  export type ComentarioUpdateManyWithoutPostNestedInput = {
    create?: XOR<ComentarioCreateWithoutPostInput, ComentarioUncheckedCreateWithoutPostInput> | ComentarioCreateWithoutPostInput[] | ComentarioUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutPostInput | ComentarioCreateOrConnectWithoutPostInput[]
    upsert?: ComentarioUpsertWithWhereUniqueWithoutPostInput | ComentarioUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ComentarioCreateManyPostInputEnvelope
    set?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    disconnect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    delete?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    update?: ComentarioUpdateWithWhereUniqueWithoutPostInput | ComentarioUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ComentarioUpdateManyWithWhereWithoutPostInput | ComentarioUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ComentarioScalarWhereInput | ComentarioScalarWhereInput[]
  }

  export type ComentarioUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ComentarioCreateWithoutPostInput, ComentarioUncheckedCreateWithoutPostInput> | ComentarioCreateWithoutPostInput[] | ComentarioUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ComentarioCreateOrConnectWithoutPostInput | ComentarioCreateOrConnectWithoutPostInput[]
    upsert?: ComentarioUpsertWithWhereUniqueWithoutPostInput | ComentarioUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ComentarioCreateManyPostInputEnvelope
    set?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    disconnect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    delete?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    connect?: ComentarioWhereUniqueInput | ComentarioWhereUniqueInput[]
    update?: ComentarioUpdateWithWhereUniqueWithoutPostInput | ComentarioUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ComentarioUpdateManyWithWhereWithoutPostInput | ComentarioUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ComentarioScalarWhereInput | ComentarioScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type MemberCreateWithoutGrupoInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutAutorInput
    comentarios?: ComentarioCreateNestedManyWithoutAutorInput
    mensalidades?: MensalidadeCreateNestedManyWithoutMembroInput
  }

  export type MemberUncheckedCreateWithoutGrupoInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAutorInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutAutorInput
    mensalidades?: MensalidadeUncheckedCreateNestedManyWithoutMembroInput
  }

  export type MemberCreateOrConnectWithoutGrupoInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutGrupoInput, MemberUncheckedCreateWithoutGrupoInput>
  }

  export type MemberCreateManyGrupoInputEnvelope = {
    data: MemberCreateManyGrupoInput | MemberCreateManyGrupoInput[]
    skipDuplicates?: boolean
  }

  export type MusicaCreateWithoutGrupoInput = {
    id?: string
    title: string
    musicUrl: string
    capaUrl: string
    letra?: string | null
    artista?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MusicaUncheckedCreateWithoutGrupoInput = {
    id?: string
    title: string
    musicUrl: string
    capaUrl: string
    letra?: string | null
    artista?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MusicaCreateOrConnectWithoutGrupoInput = {
    where: MusicaWhereUniqueInput
    create: XOR<MusicaCreateWithoutGrupoInput, MusicaUncheckedCreateWithoutGrupoInput>
  }

  export type MusicaCreateManyGrupoInputEnvelope = {
    data: MusicaCreateManyGrupoInput | MusicaCreateManyGrupoInput[]
    skipDuplicates?: boolean
  }

  export type KitCreateWithoutGrupoInput = {
    id?: string
    title: string
    nipe: string
    cantado?: string | null
    kitUrl: string
    letra?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KitUncheckedCreateWithoutGrupoInput = {
    id?: string
    title: string
    nipe: string
    cantado?: string | null
    kitUrl: string
    letra?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KitCreateOrConnectWithoutGrupoInput = {
    where: KitWhereUniqueInput
    create: XOR<KitCreateWithoutGrupoInput, KitUncheckedCreateWithoutGrupoInput>
  }

  export type KitCreateManyGrupoInputEnvelope = {
    data: KitCreateManyGrupoInput | KitCreateManyGrupoInput[]
    skipDuplicates?: boolean
  }

  export type AgendaCreateWithoutGrupoInput = {
    id?: string
    title: string
    descricao: string
    endereco?: string | null
    data?: Date | string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaUncheckedCreateWithoutGrupoInput = {
    id?: string
    title: string
    descricao: string
    endereco?: string | null
    data?: Date | string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaCreateOrConnectWithoutGrupoInput = {
    where: AgendaWhereUniqueInput
    create: XOR<AgendaCreateWithoutGrupoInput, AgendaUncheckedCreateWithoutGrupoInput>
  }

  export type AgendaCreateManyGrupoInputEnvelope = {
    data: AgendaCreateManyGrupoInput | AgendaCreateManyGrupoInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutGrupoInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    autor: MemberCreateNestedOneWithoutPostsInput
    comentarios?: ComentarioCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutGrupoInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    autorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutGrupoInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutGrupoInput, PostUncheckedCreateWithoutGrupoInput>
  }

  export type PostCreateManyGrupoInputEnvelope = {
    data: PostCreateManyGrupoInput | PostCreateManyGrupoInput[]
    skipDuplicates?: boolean
  }

  export type ComentarioCreateWithoutGrupoInput = {
    id?: string
    descricao: string
    createdAt?: Date | string
    updatedAt?: Date | string
    autor?: MemberCreateNestedOneWithoutComentariosInput
    post?: PostCreateNestedOneWithoutComentariosInput
  }

  export type ComentarioUncheckedCreateWithoutGrupoInput = {
    id?: string
    descricao: string
    autorId?: string | null
    postId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComentarioCreateOrConnectWithoutGrupoInput = {
    where: ComentarioWhereUniqueInput
    create: XOR<ComentarioCreateWithoutGrupoInput, ComentarioUncheckedCreateWithoutGrupoInput>
  }

  export type ComentarioCreateManyGrupoInputEnvelope = {
    data: ComentarioCreateManyGrupoInput | ComentarioCreateManyGrupoInput[]
    skipDuplicates?: boolean
  }

  export type MemberUpsertWithWhereUniqueWithoutGrupoInput = {
    where: MemberWhereUniqueInput
    update: XOR<MemberUpdateWithoutGrupoInput, MemberUncheckedUpdateWithoutGrupoInput>
    create: XOR<MemberCreateWithoutGrupoInput, MemberUncheckedCreateWithoutGrupoInput>
  }

  export type MemberUpdateWithWhereUniqueWithoutGrupoInput = {
    where: MemberWhereUniqueInput
    data: XOR<MemberUpdateWithoutGrupoInput, MemberUncheckedUpdateWithoutGrupoInput>
  }

  export type MemberUpdateManyWithWhereWithoutGrupoInput = {
    where: MemberScalarWhereInput
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutGrupoInput>
  }

  export type MemberScalarWhereInput = {
    AND?: MemberScalarWhereInput | MemberScalarWhereInput[]
    OR?: MemberScalarWhereInput[]
    NOT?: MemberScalarWhereInput | MemberScalarWhereInput[]
    id?: StringFilter<"Member"> | string
    nome?: StringFilter<"Member"> | string
    email?: StringFilter<"Member"> | string
    telefone?: StringNullableFilter<"Member"> | string | null
    senha?: StringFilter<"Member"> | string
    imgPerfil?: StringNullableFilter<"Member"> | string | null
    nascimento?: DateTimeFilter<"Member"> | Date | string
    nipe?: StringFilter<"Member"> | string
    cargo?: StringFilter<"Member"> | string
    isAdmin?: BoolFilter<"Member"> | boolean
    grupoId?: StringFilter<"Member"> | string
    createdAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
  }

  export type MusicaUpsertWithWhereUniqueWithoutGrupoInput = {
    where: MusicaWhereUniqueInput
    update: XOR<MusicaUpdateWithoutGrupoInput, MusicaUncheckedUpdateWithoutGrupoInput>
    create: XOR<MusicaCreateWithoutGrupoInput, MusicaUncheckedCreateWithoutGrupoInput>
  }

  export type MusicaUpdateWithWhereUniqueWithoutGrupoInput = {
    where: MusicaWhereUniqueInput
    data: XOR<MusicaUpdateWithoutGrupoInput, MusicaUncheckedUpdateWithoutGrupoInput>
  }

  export type MusicaUpdateManyWithWhereWithoutGrupoInput = {
    where: MusicaScalarWhereInput
    data: XOR<MusicaUpdateManyMutationInput, MusicaUncheckedUpdateManyWithoutGrupoInput>
  }

  export type MusicaScalarWhereInput = {
    AND?: MusicaScalarWhereInput | MusicaScalarWhereInput[]
    OR?: MusicaScalarWhereInput[]
    NOT?: MusicaScalarWhereInput | MusicaScalarWhereInput[]
    id?: StringFilter<"Musica"> | string
    title?: StringFilter<"Musica"> | string
    musicUrl?: StringFilter<"Musica"> | string
    capaUrl?: StringFilter<"Musica"> | string
    letra?: StringNullableFilter<"Musica"> | string | null
    artista?: StringNullableFilter<"Musica"> | string | null
    grupoId?: StringFilter<"Musica"> | string
    createdAt?: DateTimeFilter<"Musica"> | Date | string
    updatedAt?: DateTimeFilter<"Musica"> | Date | string
  }

  export type KitUpsertWithWhereUniqueWithoutGrupoInput = {
    where: KitWhereUniqueInput
    update: XOR<KitUpdateWithoutGrupoInput, KitUncheckedUpdateWithoutGrupoInput>
    create: XOR<KitCreateWithoutGrupoInput, KitUncheckedCreateWithoutGrupoInput>
  }

  export type KitUpdateWithWhereUniqueWithoutGrupoInput = {
    where: KitWhereUniqueInput
    data: XOR<KitUpdateWithoutGrupoInput, KitUncheckedUpdateWithoutGrupoInput>
  }

  export type KitUpdateManyWithWhereWithoutGrupoInput = {
    where: KitScalarWhereInput
    data: XOR<KitUpdateManyMutationInput, KitUncheckedUpdateManyWithoutGrupoInput>
  }

  export type KitScalarWhereInput = {
    AND?: KitScalarWhereInput | KitScalarWhereInput[]
    OR?: KitScalarWhereInput[]
    NOT?: KitScalarWhereInput | KitScalarWhereInput[]
    id?: StringFilter<"Kit"> | string
    title?: StringFilter<"Kit"> | string
    nipe?: StringFilter<"Kit"> | string
    cantado?: StringNullableFilter<"Kit"> | string | null
    kitUrl?: StringFilter<"Kit"> | string
    letra?: StringNullableFilter<"Kit"> | string | null
    grupoId?: StringFilter<"Kit"> | string
    createdAt?: DateTimeFilter<"Kit"> | Date | string
    updatedAt?: DateTimeFilter<"Kit"> | Date | string
  }

  export type AgendaUpsertWithWhereUniqueWithoutGrupoInput = {
    where: AgendaWhereUniqueInput
    update: XOR<AgendaUpdateWithoutGrupoInput, AgendaUncheckedUpdateWithoutGrupoInput>
    create: XOR<AgendaCreateWithoutGrupoInput, AgendaUncheckedCreateWithoutGrupoInput>
  }

  export type AgendaUpdateWithWhereUniqueWithoutGrupoInput = {
    where: AgendaWhereUniqueInput
    data: XOR<AgendaUpdateWithoutGrupoInput, AgendaUncheckedUpdateWithoutGrupoInput>
  }

  export type AgendaUpdateManyWithWhereWithoutGrupoInput = {
    where: AgendaScalarWhereInput
    data: XOR<AgendaUpdateManyMutationInput, AgendaUncheckedUpdateManyWithoutGrupoInput>
  }

  export type AgendaScalarWhereInput = {
    AND?: AgendaScalarWhereInput | AgendaScalarWhereInput[]
    OR?: AgendaScalarWhereInput[]
    NOT?: AgendaScalarWhereInput | AgendaScalarWhereInput[]
    id?: StringFilter<"Agenda"> | string
    title?: StringFilter<"Agenda"> | string
    descricao?: StringFilter<"Agenda"> | string
    endereco?: StringNullableFilter<"Agenda"> | string | null
    data?: DateTimeNullableFilter<"Agenda"> | Date | string | null
    status?: StringFilter<"Agenda"> | string
    grupoId?: StringFilter<"Agenda"> | string
    createdAt?: DateTimeFilter<"Agenda"> | Date | string
    updatedAt?: DateTimeFilter<"Agenda"> | Date | string
  }

  export type PostUpsertWithWhereUniqueWithoutGrupoInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutGrupoInput, PostUncheckedUpdateWithoutGrupoInput>
    create: XOR<PostCreateWithoutGrupoInput, PostUncheckedCreateWithoutGrupoInput>
  }

  export type PostUpdateWithWhereUniqueWithoutGrupoInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutGrupoInput, PostUncheckedUpdateWithoutGrupoInput>
  }

  export type PostUpdateManyWithWhereWithoutGrupoInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutGrupoInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    title?: StringFilter<"Post"> | string
    descricao?: StringFilter<"Post"> | string
    imagem?: StringNullableFilter<"Post"> | string | null
    grupoId?: StringFilter<"Post"> | string
    autorId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
  }

  export type ComentarioUpsertWithWhereUniqueWithoutGrupoInput = {
    where: ComentarioWhereUniqueInput
    update: XOR<ComentarioUpdateWithoutGrupoInput, ComentarioUncheckedUpdateWithoutGrupoInput>
    create: XOR<ComentarioCreateWithoutGrupoInput, ComentarioUncheckedCreateWithoutGrupoInput>
  }

  export type ComentarioUpdateWithWhereUniqueWithoutGrupoInput = {
    where: ComentarioWhereUniqueInput
    data: XOR<ComentarioUpdateWithoutGrupoInput, ComentarioUncheckedUpdateWithoutGrupoInput>
  }

  export type ComentarioUpdateManyWithWhereWithoutGrupoInput = {
    where: ComentarioScalarWhereInput
    data: XOR<ComentarioUpdateManyMutationInput, ComentarioUncheckedUpdateManyWithoutGrupoInput>
  }

  export type ComentarioScalarWhereInput = {
    AND?: ComentarioScalarWhereInput | ComentarioScalarWhereInput[]
    OR?: ComentarioScalarWhereInput[]
    NOT?: ComentarioScalarWhereInput | ComentarioScalarWhereInput[]
    id?: StringFilter<"Comentario"> | string
    descricao?: StringFilter<"Comentario"> | string
    autorId?: StringNullableFilter<"Comentario"> | string | null
    grupoId?: StringNullableFilter<"Comentario"> | string | null
    postId?: StringNullableFilter<"Comentario"> | string | null
    createdAt?: DateTimeFilter<"Comentario"> | Date | string
    updatedAt?: DateTimeFilter<"Comentario"> | Date | string
  }

  export type GroupCreateWithoutMembrosInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    musicas?: MusicaCreateNestedManyWithoutGrupoInput
    kits?: KitCreateNestedManyWithoutGrupoInput
    agendas?: AgendaCreateNestedManyWithoutGrupoInput
    posts?: PostCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioCreateNestedManyWithoutGrupoInput
  }

  export type GroupUncheckedCreateWithoutMembrosInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    musicas?: MusicaUncheckedCreateNestedManyWithoutGrupoInput
    kits?: KitUncheckedCreateNestedManyWithoutGrupoInput
    agendas?: AgendaUncheckedCreateNestedManyWithoutGrupoInput
    posts?: PostUncheckedCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GroupCreateOrConnectWithoutMembrosInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutMembrosInput, GroupUncheckedCreateWithoutMembrosInput>
  }

  export type PostCreateWithoutAutorInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutPostsInput
    comentarios?: ComentarioCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutAutorInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutAutorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAutorInput, PostUncheckedCreateWithoutAutorInput>
  }

  export type PostCreateManyAutorInputEnvelope = {
    data: PostCreateManyAutorInput | PostCreateManyAutorInput[]
    skipDuplicates?: boolean
  }

  export type ComentarioCreateWithoutAutorInput = {
    id?: string
    descricao: string
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GroupCreateNestedOneWithoutComentariosInput
    post?: PostCreateNestedOneWithoutComentariosInput
  }

  export type ComentarioUncheckedCreateWithoutAutorInput = {
    id?: string
    descricao: string
    grupoId?: string | null
    postId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComentarioCreateOrConnectWithoutAutorInput = {
    where: ComentarioWhereUniqueInput
    create: XOR<ComentarioCreateWithoutAutorInput, ComentarioUncheckedCreateWithoutAutorInput>
  }

  export type ComentarioCreateManyAutorInputEnvelope = {
    data: ComentarioCreateManyAutorInput | ComentarioCreateManyAutorInput[]
    skipDuplicates?: boolean
  }

  export type MensalidadeCreateWithoutMembroInput = {
    id?: string
    valor: number
    descricao?: string | null
    vencimento: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MensalidadeUncheckedCreateWithoutMembroInput = {
    id?: string
    valor: number
    descricao?: string | null
    vencimento: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MensalidadeCreateOrConnectWithoutMembroInput = {
    where: MensalidadeWhereUniqueInput
    create: XOR<MensalidadeCreateWithoutMembroInput, MensalidadeUncheckedCreateWithoutMembroInput>
  }

  export type MensalidadeCreateManyMembroInputEnvelope = {
    data: MensalidadeCreateManyMembroInput | MensalidadeCreateManyMembroInput[]
    skipDuplicates?: boolean
  }

  export type GroupUpsertWithoutMembrosInput = {
    update: XOR<GroupUpdateWithoutMembrosInput, GroupUncheckedUpdateWithoutMembrosInput>
    create: XOR<GroupCreateWithoutMembrosInput, GroupUncheckedCreateWithoutMembrosInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutMembrosInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutMembrosInput, GroupUncheckedUpdateWithoutMembrosInput>
  }

  export type GroupUpdateWithoutMembrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musicas?: MusicaUpdateManyWithoutGrupoNestedInput
    kits?: KitUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUpdateManyWithoutGrupoNestedInput
    posts?: PostUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUpdateManyWithoutGrupoNestedInput
  }

  export type GroupUncheckedUpdateWithoutMembrosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musicas?: MusicaUncheckedUpdateManyWithoutGrupoNestedInput
    kits?: KitUncheckedUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUncheckedUpdateManyWithoutGrupoNestedInput
    posts?: PostUncheckedUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type PostUpsertWithWhereUniqueWithoutAutorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAutorInput, PostUncheckedUpdateWithoutAutorInput>
    create: XOR<PostCreateWithoutAutorInput, PostUncheckedCreateWithoutAutorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAutorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAutorInput, PostUncheckedUpdateWithoutAutorInput>
  }

  export type PostUpdateManyWithWhereWithoutAutorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutAutorInput>
  }

  export type ComentarioUpsertWithWhereUniqueWithoutAutorInput = {
    where: ComentarioWhereUniqueInput
    update: XOR<ComentarioUpdateWithoutAutorInput, ComentarioUncheckedUpdateWithoutAutorInput>
    create: XOR<ComentarioCreateWithoutAutorInput, ComentarioUncheckedCreateWithoutAutorInput>
  }

  export type ComentarioUpdateWithWhereUniqueWithoutAutorInput = {
    where: ComentarioWhereUniqueInput
    data: XOR<ComentarioUpdateWithoutAutorInput, ComentarioUncheckedUpdateWithoutAutorInput>
  }

  export type ComentarioUpdateManyWithWhereWithoutAutorInput = {
    where: ComentarioScalarWhereInput
    data: XOR<ComentarioUpdateManyMutationInput, ComentarioUncheckedUpdateManyWithoutAutorInput>
  }

  export type MensalidadeUpsertWithWhereUniqueWithoutMembroInput = {
    where: MensalidadeWhereUniqueInput
    update: XOR<MensalidadeUpdateWithoutMembroInput, MensalidadeUncheckedUpdateWithoutMembroInput>
    create: XOR<MensalidadeCreateWithoutMembroInput, MensalidadeUncheckedCreateWithoutMembroInput>
  }

  export type MensalidadeUpdateWithWhereUniqueWithoutMembroInput = {
    where: MensalidadeWhereUniqueInput
    data: XOR<MensalidadeUpdateWithoutMembroInput, MensalidadeUncheckedUpdateWithoutMembroInput>
  }

  export type MensalidadeUpdateManyWithWhereWithoutMembroInput = {
    where: MensalidadeScalarWhereInput
    data: XOR<MensalidadeUpdateManyMutationInput, MensalidadeUncheckedUpdateManyWithoutMembroInput>
  }

  export type MensalidadeScalarWhereInput = {
    AND?: MensalidadeScalarWhereInput | MensalidadeScalarWhereInput[]
    OR?: MensalidadeScalarWhereInput[]
    NOT?: MensalidadeScalarWhereInput | MensalidadeScalarWhereInput[]
    id?: StringFilter<"Mensalidade"> | string
    valor?: FloatFilter<"Mensalidade"> | number
    descricao?: StringNullableFilter<"Mensalidade"> | string | null
    vencimento?: DateTimeFilter<"Mensalidade"> | Date | string
    membroId?: StringFilter<"Mensalidade"> | string
    createdAt?: DateTimeFilter<"Mensalidade"> | Date | string
    updatedAt?: DateTimeFilter<"Mensalidade"> | Date | string
  }

  export type GroupCreateWithoutMusicasInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberCreateNestedManyWithoutGrupoInput
    kits?: KitCreateNestedManyWithoutGrupoInput
    agendas?: AgendaCreateNestedManyWithoutGrupoInput
    posts?: PostCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioCreateNestedManyWithoutGrupoInput
  }

  export type GroupUncheckedCreateWithoutMusicasInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberUncheckedCreateNestedManyWithoutGrupoInput
    kits?: KitUncheckedCreateNestedManyWithoutGrupoInput
    agendas?: AgendaUncheckedCreateNestedManyWithoutGrupoInput
    posts?: PostUncheckedCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GroupCreateOrConnectWithoutMusicasInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutMusicasInput, GroupUncheckedCreateWithoutMusicasInput>
  }

  export type GroupUpsertWithoutMusicasInput = {
    update: XOR<GroupUpdateWithoutMusicasInput, GroupUncheckedUpdateWithoutMusicasInput>
    create: XOR<GroupCreateWithoutMusicasInput, GroupUncheckedCreateWithoutMusicasInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutMusicasInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutMusicasInput, GroupUncheckedUpdateWithoutMusicasInput>
  }

  export type GroupUpdateWithoutMusicasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUpdateManyWithoutGrupoNestedInput
    kits?: KitUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUpdateManyWithoutGrupoNestedInput
    posts?: PostUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUpdateManyWithoutGrupoNestedInput
  }

  export type GroupUncheckedUpdateWithoutMusicasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUncheckedUpdateManyWithoutGrupoNestedInput
    kits?: KitUncheckedUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUncheckedUpdateManyWithoutGrupoNestedInput
    posts?: PostUncheckedUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type GroupCreateWithoutKitsInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberCreateNestedManyWithoutGrupoInput
    musicas?: MusicaCreateNestedManyWithoutGrupoInput
    agendas?: AgendaCreateNestedManyWithoutGrupoInput
    posts?: PostCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioCreateNestedManyWithoutGrupoInput
  }

  export type GroupUncheckedCreateWithoutKitsInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberUncheckedCreateNestedManyWithoutGrupoInput
    musicas?: MusicaUncheckedCreateNestedManyWithoutGrupoInput
    agendas?: AgendaUncheckedCreateNestedManyWithoutGrupoInput
    posts?: PostUncheckedCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GroupCreateOrConnectWithoutKitsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutKitsInput, GroupUncheckedCreateWithoutKitsInput>
  }

  export type GroupUpsertWithoutKitsInput = {
    update: XOR<GroupUpdateWithoutKitsInput, GroupUncheckedUpdateWithoutKitsInput>
    create: XOR<GroupCreateWithoutKitsInput, GroupUncheckedCreateWithoutKitsInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutKitsInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutKitsInput, GroupUncheckedUpdateWithoutKitsInput>
  }

  export type GroupUpdateWithoutKitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUpdateManyWithoutGrupoNestedInput
    posts?: PostUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUpdateManyWithoutGrupoNestedInput
  }

  export type GroupUncheckedUpdateWithoutKitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUncheckedUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUncheckedUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUncheckedUpdateManyWithoutGrupoNestedInput
    posts?: PostUncheckedUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type GroupCreateWithoutAgendasInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberCreateNestedManyWithoutGrupoInput
    musicas?: MusicaCreateNestedManyWithoutGrupoInput
    kits?: KitCreateNestedManyWithoutGrupoInput
    posts?: PostCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioCreateNestedManyWithoutGrupoInput
  }

  export type GroupUncheckedCreateWithoutAgendasInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberUncheckedCreateNestedManyWithoutGrupoInput
    musicas?: MusicaUncheckedCreateNestedManyWithoutGrupoInput
    kits?: KitUncheckedCreateNestedManyWithoutGrupoInput
    posts?: PostUncheckedCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GroupCreateOrConnectWithoutAgendasInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutAgendasInput, GroupUncheckedCreateWithoutAgendasInput>
  }

  export type GroupUpsertWithoutAgendasInput = {
    update: XOR<GroupUpdateWithoutAgendasInput, GroupUncheckedUpdateWithoutAgendasInput>
    create: XOR<GroupCreateWithoutAgendasInput, GroupUncheckedCreateWithoutAgendasInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutAgendasInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutAgendasInput, GroupUncheckedUpdateWithoutAgendasInput>
  }

  export type GroupUpdateWithoutAgendasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUpdateManyWithoutGrupoNestedInput
    kits?: KitUpdateManyWithoutGrupoNestedInput
    posts?: PostUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUpdateManyWithoutGrupoNestedInput
  }

  export type GroupUncheckedUpdateWithoutAgendasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUncheckedUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUncheckedUpdateManyWithoutGrupoNestedInput
    kits?: KitUncheckedUpdateManyWithoutGrupoNestedInput
    posts?: PostUncheckedUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type MemberCreateWithoutComentariosInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutMembrosInput
    posts?: PostCreateNestedManyWithoutAutorInput
    mensalidades?: MensalidadeCreateNestedManyWithoutMembroInput
  }

  export type MemberUncheckedCreateWithoutComentariosInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAutorInput
    mensalidades?: MensalidadeUncheckedCreateNestedManyWithoutMembroInput
  }

  export type MemberCreateOrConnectWithoutComentariosInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutComentariosInput, MemberUncheckedCreateWithoutComentariosInput>
  }

  export type GroupCreateWithoutComentariosInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberCreateNestedManyWithoutGrupoInput
    musicas?: MusicaCreateNestedManyWithoutGrupoInput
    kits?: KitCreateNestedManyWithoutGrupoInput
    agendas?: AgendaCreateNestedManyWithoutGrupoInput
    posts?: PostCreateNestedManyWithoutGrupoInput
  }

  export type GroupUncheckedCreateWithoutComentariosInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberUncheckedCreateNestedManyWithoutGrupoInput
    musicas?: MusicaUncheckedCreateNestedManyWithoutGrupoInput
    kits?: KitUncheckedCreateNestedManyWithoutGrupoInput
    agendas?: AgendaUncheckedCreateNestedManyWithoutGrupoInput
    posts?: PostUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GroupCreateOrConnectWithoutComentariosInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutComentariosInput, GroupUncheckedCreateWithoutComentariosInput>
  }

  export type PostCreateWithoutComentariosInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutPostsInput
    autor: MemberCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutComentariosInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    grupoId: string
    autorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateOrConnectWithoutComentariosInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutComentariosInput, PostUncheckedCreateWithoutComentariosInput>
  }

  export type MemberUpsertWithoutComentariosInput = {
    update: XOR<MemberUpdateWithoutComentariosInput, MemberUncheckedUpdateWithoutComentariosInput>
    create: XOR<MemberCreateWithoutComentariosInput, MemberUncheckedCreateWithoutComentariosInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutComentariosInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutComentariosInput, MemberUncheckedUpdateWithoutComentariosInput>
  }

  export type MemberUpdateWithoutComentariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutMembrosNestedInput
    posts?: PostUpdateManyWithoutAutorNestedInput
    mensalidades?: MensalidadeUpdateManyWithoutMembroNestedInput
  }

  export type MemberUncheckedUpdateWithoutComentariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAutorNestedInput
    mensalidades?: MensalidadeUncheckedUpdateManyWithoutMembroNestedInput
  }

  export type GroupUpsertWithoutComentariosInput = {
    update: XOR<GroupUpdateWithoutComentariosInput, GroupUncheckedUpdateWithoutComentariosInput>
    create: XOR<GroupCreateWithoutComentariosInput, GroupUncheckedCreateWithoutComentariosInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutComentariosInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutComentariosInput, GroupUncheckedUpdateWithoutComentariosInput>
  }

  export type GroupUpdateWithoutComentariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUpdateManyWithoutGrupoNestedInput
    kits?: KitUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUpdateManyWithoutGrupoNestedInput
    posts?: PostUpdateManyWithoutGrupoNestedInput
  }

  export type GroupUncheckedUpdateWithoutComentariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUncheckedUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUncheckedUpdateManyWithoutGrupoNestedInput
    kits?: KitUncheckedUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUncheckedUpdateManyWithoutGrupoNestedInput
    posts?: PostUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type PostUpsertWithoutComentariosInput = {
    update: XOR<PostUpdateWithoutComentariosInput, PostUncheckedUpdateWithoutComentariosInput>
    create: XOR<PostCreateWithoutComentariosInput, PostUncheckedCreateWithoutComentariosInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutComentariosInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutComentariosInput, PostUncheckedUpdateWithoutComentariosInput>
  }

  export type PostUpdateWithoutComentariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutPostsNestedInput
    autor?: MemberUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutComentariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    autorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberCreateWithoutMensalidadesInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutMembrosInput
    posts?: PostCreateNestedManyWithoutAutorInput
    comentarios?: ComentarioCreateNestedManyWithoutAutorInput
  }

  export type MemberUncheckedCreateWithoutMensalidadesInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAutorInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutAutorInput
  }

  export type MemberCreateOrConnectWithoutMensalidadesInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutMensalidadesInput, MemberUncheckedCreateWithoutMensalidadesInput>
  }

  export type MemberUpsertWithoutMensalidadesInput = {
    update: XOR<MemberUpdateWithoutMensalidadesInput, MemberUncheckedUpdateWithoutMensalidadesInput>
    create: XOR<MemberCreateWithoutMensalidadesInput, MemberUncheckedCreateWithoutMensalidadesInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutMensalidadesInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutMensalidadesInput, MemberUncheckedUpdateWithoutMensalidadesInput>
  }

  export type MemberUpdateWithoutMensalidadesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutMembrosNestedInput
    posts?: PostUpdateManyWithoutAutorNestedInput
    comentarios?: ComentarioUpdateManyWithoutAutorNestedInput
  }

  export type MemberUncheckedUpdateWithoutMensalidadesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAutorNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutAutorNestedInput
  }

  export type GroupCreateWithoutPostsInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberCreateNestedManyWithoutGrupoInput
    musicas?: MusicaCreateNestedManyWithoutGrupoInput
    kits?: KitCreateNestedManyWithoutGrupoInput
    agendas?: AgendaCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioCreateNestedManyWithoutGrupoInput
  }

  export type GroupUncheckedCreateWithoutPostsInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    isAdmin?: boolean
    ImgPerfil?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    membros?: MemberUncheckedCreateNestedManyWithoutGrupoInput
    musicas?: MusicaUncheckedCreateNestedManyWithoutGrupoInput
    kits?: KitUncheckedCreateNestedManyWithoutGrupoInput
    agendas?: AgendaUncheckedCreateNestedManyWithoutGrupoInput
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GroupCreateOrConnectWithoutPostsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutPostsInput, GroupUncheckedCreateWithoutPostsInput>
  }

  export type MemberCreateWithoutPostsInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GroupCreateNestedOneWithoutMembrosInput
    comentarios?: ComentarioCreateNestedManyWithoutAutorInput
    mensalidades?: MensalidadeCreateNestedManyWithoutMembroInput
  }

  export type MemberUncheckedCreateWithoutPostsInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comentarios?: ComentarioUncheckedCreateNestedManyWithoutAutorInput
    mensalidades?: MensalidadeUncheckedCreateNestedManyWithoutMembroInput
  }

  export type MemberCreateOrConnectWithoutPostsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutPostsInput, MemberUncheckedCreateWithoutPostsInput>
  }

  export type ComentarioCreateWithoutPostInput = {
    id?: string
    descricao: string
    createdAt?: Date | string
    updatedAt?: Date | string
    autor?: MemberCreateNestedOneWithoutComentariosInput
    grupo?: GroupCreateNestedOneWithoutComentariosInput
  }

  export type ComentarioUncheckedCreateWithoutPostInput = {
    id?: string
    descricao: string
    autorId?: string | null
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComentarioCreateOrConnectWithoutPostInput = {
    where: ComentarioWhereUniqueInput
    create: XOR<ComentarioCreateWithoutPostInput, ComentarioUncheckedCreateWithoutPostInput>
  }

  export type ComentarioCreateManyPostInputEnvelope = {
    data: ComentarioCreateManyPostInput | ComentarioCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type GroupUpsertWithoutPostsInput = {
    update: XOR<GroupUpdateWithoutPostsInput, GroupUncheckedUpdateWithoutPostsInput>
    create: XOR<GroupCreateWithoutPostsInput, GroupUncheckedCreateWithoutPostsInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutPostsInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutPostsInput, GroupUncheckedUpdateWithoutPostsInput>
  }

  export type GroupUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUpdateManyWithoutGrupoNestedInput
    kits?: KitUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUpdateManyWithoutGrupoNestedInput
  }

  export type GroupUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    ImgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    membros?: MemberUncheckedUpdateManyWithoutGrupoNestedInput
    musicas?: MusicaUncheckedUpdateManyWithoutGrupoNestedInput
    kits?: KitUncheckedUpdateManyWithoutGrupoNestedInput
    agendas?: AgendaUncheckedUpdateManyWithoutGrupoNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type MemberUpsertWithoutPostsInput = {
    update: XOR<MemberUpdateWithoutPostsInput, MemberUncheckedUpdateWithoutPostsInput>
    create: XOR<MemberCreateWithoutPostsInput, MemberUncheckedCreateWithoutPostsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutPostsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutPostsInput, MemberUncheckedUpdateWithoutPostsInput>
  }

  export type MemberUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutMembrosNestedInput
    comentarios?: ComentarioUpdateManyWithoutAutorNestedInput
    mensalidades?: MensalidadeUpdateManyWithoutMembroNestedInput
  }

  export type MemberUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comentarios?: ComentarioUncheckedUpdateManyWithoutAutorNestedInput
    mensalidades?: MensalidadeUncheckedUpdateManyWithoutMembroNestedInput
  }

  export type ComentarioUpsertWithWhereUniqueWithoutPostInput = {
    where: ComentarioWhereUniqueInput
    update: XOR<ComentarioUpdateWithoutPostInput, ComentarioUncheckedUpdateWithoutPostInput>
    create: XOR<ComentarioCreateWithoutPostInput, ComentarioUncheckedCreateWithoutPostInput>
  }

  export type ComentarioUpdateWithWhereUniqueWithoutPostInput = {
    where: ComentarioWhereUniqueInput
    data: XOR<ComentarioUpdateWithoutPostInput, ComentarioUncheckedUpdateWithoutPostInput>
  }

  export type ComentarioUpdateManyWithWhereWithoutPostInput = {
    where: ComentarioScalarWhereInput
    data: XOR<ComentarioUpdateManyMutationInput, ComentarioUncheckedUpdateManyWithoutPostInput>
  }

  export type MemberCreateManyGrupoInput = {
    id?: string
    nome: string
    email: string
    telefone?: string | null
    senha: string
    imgPerfil?: string | null
    nascimento: Date | string
    nipe: string
    cargo: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MusicaCreateManyGrupoInput = {
    id?: string
    title: string
    musicUrl: string
    capaUrl: string
    letra?: string | null
    artista?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KitCreateManyGrupoInput = {
    id?: string
    title: string
    nipe: string
    cantado?: string | null
    kitUrl: string
    letra?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaCreateManyGrupoInput = {
    id?: string
    title: string
    descricao: string
    endereco?: string | null
    data?: Date | string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateManyGrupoInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    autorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComentarioCreateManyGrupoInput = {
    id?: string
    descricao: string
    autorId?: string | null
    postId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemberUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutAutorNestedInput
    comentarios?: ComentarioUpdateManyWithoutAutorNestedInput
    mensalidades?: MensalidadeUpdateManyWithoutMembroNestedInput
  }

  export type MemberUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAutorNestedInput
    comentarios?: ComentarioUncheckedUpdateManyWithoutAutorNestedInput
    mensalidades?: MensalidadeUncheckedUpdateManyWithoutMembroNestedInput
  }

  export type MemberUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    imgPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    nipe?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MusicaUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    musicUrl?: StringFieldUpdateOperationsInput | string
    capaUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MusicaUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    musicUrl?: StringFieldUpdateOperationsInput | string
    capaUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MusicaUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    musicUrl?: StringFieldUpdateOperationsInput | string
    capaUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    nipe?: StringFieldUpdateOperationsInput | string
    cantado?: NullableStringFieldUpdateOperationsInput | string | null
    kitUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    nipe?: StringFieldUpdateOperationsInput | string
    cantado?: NullableStringFieldUpdateOperationsInput | string | null
    kitUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    nipe?: StringFieldUpdateOperationsInput | string
    cantado?: NullableStringFieldUpdateOperationsInput | string | null
    kitUrl?: StringFieldUpdateOperationsInput | string
    letra?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: MemberUpdateOneRequiredWithoutPostsNestedInput
    comentarios?: ComentarioUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    autorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comentarios?: ComentarioUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    autorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: MemberUpdateOneWithoutComentariosNestedInput
    post?: PostUpdateOneWithoutComentariosNestedInput
  }

  export type ComentarioUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    autorId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    autorId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateManyAutorInput = {
    id?: string
    title: string
    descricao: string
    imagem?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComentarioCreateManyAutorInput = {
    id?: string
    descricao: string
    grupoId?: string | null
    postId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MensalidadeCreateManyMembroInput = {
    id?: string
    valor: number
    descricao?: string | null
    vencimento: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneRequiredWithoutPostsNestedInput
    comentarios?: ComentarioUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comentarios?: ComentarioUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioUpdateWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GroupUpdateOneWithoutComentariosNestedInput
    post?: PostUpdateOneWithoutComentariosNestedInput
  }

  export type ComentarioUncheckedUpdateWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioUncheckedUpdateManyWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensalidadeUpdateWithoutMembroInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensalidadeUncheckedUpdateWithoutMembroInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensalidadeUncheckedUpdateManyWithoutMembroInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioCreateManyPostInput = {
    id?: string
    descricao: string
    autorId?: string | null
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComentarioUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: MemberUpdateOneWithoutComentariosNestedInput
    grupo?: GroupUpdateOneWithoutComentariosNestedInput
  }

  export type ComentarioUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    autorId?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    autorId?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GroupCountOutputTypeDefaultArgs instead
     */
    export type GroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberCountOutputTypeDefaultArgs instead
     */
    export type MemberCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostCountOutputTypeDefaultArgs instead
     */
    export type PostCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupDefaultArgs instead
     */
    export type GroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberDefaultArgs instead
     */
    export type MemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MusicaDefaultArgs instead
     */
    export type MusicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MusicaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KitDefaultArgs instead
     */
    export type KitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgendaDefaultArgs instead
     */
    export type AgendaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgendaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComentarioDefaultArgs instead
     */
    export type ComentarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComentarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MensalidadeDefaultArgs instead
     */
    export type MensalidadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MensalidadeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostDefaultArgs instead
     */
    export type PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}